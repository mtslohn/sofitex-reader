/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package br.org.stela.intelectus.service.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-6-9")
public class PessoaAnnotation
		implements org.apache.thrift.TBase<PessoaAnnotation, PessoaAnnotation._Fields>, java.io.Serializable, Cloneable, Comparable<PessoaAnnotation> {
	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PessoaAnnotation");

	private static final org.apache.thrift.protocol.TField PESSOA_FIELD_DESC =
			new org.apache.thrift.protocol.TField("pessoa", org.apache.thrift.protocol.TType.STRUCT, (short) 1);
	private static final org.apache.thrift.protocol.TField ANNOTATIONS_FIELD_DESC =
			new org.apache.thrift.protocol.TField("annotations", org.apache.thrift.protocol.TType.MAP, (short) 2);

	private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

	static {
		schemes.put(StandardScheme.class, new PessoaAnnotationStandardSchemeFactory());
		schemes.put(TupleScheme.class, new PessoaAnnotationTupleSchemeFactory());
	}

	private br.org.stela.intelectus.lattes.thrift.Pessoa pessoa; // required
	private Map<AnnotationType, List<AnnotationValue>> annotations; // required

	/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {
		PESSOA((short) 1, "pessoa"),
		ANNOTATIONS((short) 2, "annotations");

		private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

		static {
			for (_Fields field : EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not found.
		 */
		public static _Fields findByThriftId(int fieldId) {
			switch (fieldId) {
			case 1: // PESSOA
				return PESSOA;
			case 2: // ANNOTATIONS
				return ANNOTATIONS;
			default:
				return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null)
				throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not found.
		 */
		public static _Fields findByName(String name) {
			return byName.get(name);
		}

		private final short _thriftId;
		private final String _fieldName;

		_Fields(short thriftId, String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public String getFieldName() {
			return _fieldName;
		}
	}

	// isset id assignments
	public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

	static {
		Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
		tmpMap.put(_Fields.PESSOA, new org.apache.thrift.meta_data.FieldMetaData("pessoa", org.apache.thrift.TFieldRequirementType.REQUIRED,
				new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, br.org.stela.intelectus.lattes.thrift.Pessoa.class)));
		tmpMap.put(_Fields.ANNOTATIONS,
				new org.apache.thrift.meta_data.FieldMetaData("annotations", org.apache.thrift.TFieldRequirementType.REQUIRED,
						new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
								new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, AnnotationType.class),
								new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
										new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AnnotationValue.class)))));
		metaDataMap = Collections.unmodifiableMap(tmpMap);
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PessoaAnnotation.class, metaDataMap);
	}

	public PessoaAnnotation() {
	}

	public PessoaAnnotation(br.org.stela.intelectus.lattes.thrift.Pessoa pessoa, Map<AnnotationType, List<AnnotationValue>> annotations) {
		this();
		this.pessoa = pessoa;
		this.annotations = annotations;
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public PessoaAnnotation(PessoaAnnotation other) {
		if (other.isSetPessoa()) {
			this.pessoa = new br.org.stela.intelectus.lattes.thrift.Pessoa(other.pessoa);
		}
		if (other.isSetAnnotations()) {
			Map<AnnotationType, List<AnnotationValue>> __this__annotations = new HashMap<AnnotationType, List<AnnotationValue>>(other.annotations.size());
			for (Map.Entry<AnnotationType, List<AnnotationValue>> other_element : other.annotations.entrySet()) {

				AnnotationType other_element_key = other_element.getKey();
				List<AnnotationValue> other_element_value = other_element.getValue();

				AnnotationType __this__annotations_copy_key = other_element_key;

				List<AnnotationValue> __this__annotations_copy_value = new ArrayList<AnnotationValue>(other_element_value.size());
				for (AnnotationValue other_element_value_element : other_element_value) {
					__this__annotations_copy_value.add(new AnnotationValue(other_element_value_element));
				}

				__this__annotations.put(__this__annotations_copy_key, __this__annotations_copy_value);
			}
			this.annotations = __this__annotations;
		}
	}

	public PessoaAnnotation deepCopy() {
		return new PessoaAnnotation(this);
	}

	@Override
	public void clear() {
		this.pessoa = null;
		this.annotations = null;
	}

	public br.org.stela.intelectus.lattes.thrift.Pessoa getPessoa() {
		return this.pessoa;
	}

	public void setPessoa(br.org.stela.intelectus.lattes.thrift.Pessoa pessoa) {
		this.pessoa = pessoa;
	}

	public void unsetPessoa() {
		this.pessoa = null;
	}

	/** Returns true if field pessoa is set (has been assigned a value) and false otherwise */
	public boolean isSetPessoa() {
		return this.pessoa != null;
	}

	public void setPessoaIsSet(boolean value) {
		if (!value) {
			this.pessoa = null;
		}
	}

	public int getAnnotationsSize() {
		return (this.annotations == null) ? 0 : this.annotations.size();
	}

	public void putToAnnotations(AnnotationType key, List<AnnotationValue> val) {
		if (this.annotations == null) {
			this.annotations = new HashMap<AnnotationType, List<AnnotationValue>>();
		}
		this.annotations.put(key, val);
	}

	public Map<AnnotationType, List<AnnotationValue>> getAnnotations() {
		return this.annotations;
	}

	public void setAnnotations(Map<AnnotationType, List<AnnotationValue>> annotations) {
		this.annotations = annotations;
	}

	public void unsetAnnotations() {
		this.annotations = null;
	}

	/** Returns true if field annotations is set (has been assigned a value) and false otherwise */
	public boolean isSetAnnotations() {
		return this.annotations != null;
	}

	public void setAnnotationsIsSet(boolean value) {
		if (!value) {
			this.annotations = null;
		}
	}

	public void setFieldValue(_Fields field, Object value) {
		switch (field) {
		case PESSOA:
			if (value == null) {
				unsetPessoa();
			} else {
				setPessoa((br.org.stela.intelectus.lattes.thrift.Pessoa) value);
			}
			break;

		case ANNOTATIONS:
			if (value == null) {
				unsetAnnotations();
			} else {
				setAnnotations((Map<AnnotationType, List<AnnotationValue>>) value);
			}
			break;

		}
	}

	public Object getFieldValue(_Fields field) {
		switch (field) {
		case PESSOA:
			return getPessoa();

		case ANNOTATIONS:
			return getAnnotations();

		}
		throw new IllegalStateException();
	}

	/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
	public boolean isSet(_Fields field) {
		if (field == null) {
			throw new IllegalArgumentException();
		}

		switch (field) {
		case PESSOA:
			return isSetPessoa();
		case ANNOTATIONS:
			return isSetAnnotations();
		}
		throw new IllegalStateException();
	}

	@Override
	public boolean equals(Object that) {
		if (that == null)
			return false;
		if (that instanceof PessoaAnnotation)
			return this.equals((PessoaAnnotation) that);
		return false;
	}

	public boolean equals(PessoaAnnotation that) {
		if (that == null)
			return false;

		boolean this_present_pessoa = true && this.isSetPessoa();
		boolean that_present_pessoa = true && that.isSetPessoa();
		if (this_present_pessoa || that_present_pessoa) {
			if (!(this_present_pessoa && that_present_pessoa))
				return false;
			if (!this.pessoa.equals(that.pessoa))
				return false;
		}

		boolean this_present_annotations = true && this.isSetAnnotations();
		boolean that_present_annotations = true && that.isSetAnnotations();
		if (this_present_annotations || that_present_annotations) {
			if (!(this_present_annotations && that_present_annotations))
				return false;
			if (!this.annotations.equals(that.annotations))
				return false;
		}

		return true;
	}

	@Override
	public int hashCode() {
		List<Object> list = new ArrayList<Object>();

		boolean present_pessoa = true && (isSetPessoa());
		list.add(present_pessoa);
		if (present_pessoa)
			list.add(pessoa);

		boolean present_annotations = true && (isSetAnnotations());
		list.add(present_annotations);
		if (present_annotations)
			list.add(annotations);

		return list.hashCode();
	}

	@Override
	public int compareTo(PessoaAnnotation other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;

		lastComparison = Boolean.valueOf(isSetPessoa()).compareTo(other.isSetPessoa());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetPessoa()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pessoa, other.pessoa);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetAnnotations()).compareTo(other.isSetAnnotations());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetAnnotations()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.annotations, other.annotations);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		return 0;
	}

	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
		schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
		schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder("PessoaAnnotation(");
		boolean first = true;

		sb.append("pessoa:");
		if (this.pessoa == null) {
			sb.append("null");
		} else {
			sb.append(this.pessoa);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("annotations:");
		if (this.annotations == null) {
			sb.append("null");
		} else {
			sb.append(this.annotations);
		}
		first = false;
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
		if (!isSetPessoa()) {
			throw new org.apache.thrift.protocol.TProtocolException("Required field 'pessoa' is unset! Struct:" + toString());
		}

		if (!isSetAnnotations()) {
			throw new org.apache.thrift.protocol.TProtocolException("Required field 'annotations' is unset! Struct:" + toString());
		}

		// check for sub-struct validity
		if (pessoa != null) {
			pessoa.validate();
		}
	}

	private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
		try {
			read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private static class PessoaAnnotationStandardSchemeFactory implements SchemeFactory {
		public PessoaAnnotationStandardScheme getScheme() {
			return new PessoaAnnotationStandardScheme();
		}
	}

	private static class PessoaAnnotationStandardScheme extends StandardScheme<PessoaAnnotation> {

		public void read(org.apache.thrift.protocol.TProtocol iprot, PessoaAnnotation struct) throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (schemeField.id) {
				case 1: // PESSOA
					if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
						struct.pessoa = new br.org.stela.intelectus.lattes.thrift.Pessoa();
						struct.pessoa.read(iprot);
						struct.setPessoaIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 2: // ANNOTATIONS
					if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
						{
							org.apache.thrift.protocol.TMap _map44 = iprot.readMapBegin();
							struct.annotations = new HashMap<AnnotationType, List<AnnotationValue>>(2 * _map44.size);
							AnnotationType _key45;
							List<AnnotationValue> _val46;
							for (int _i47 = 0; _i47 < _map44.size; ++_i47) {
								_key45 = br.org.stela.intelectus.service.thrift.AnnotationType.findByValue(iprot.readI32());
								{
									org.apache.thrift.protocol.TList _list48 = iprot.readListBegin();
									_val46 = new ArrayList<AnnotationValue>(_list48.size);
									AnnotationValue _elem49;
									for (int _i50 = 0; _i50 < _list48.size; ++_i50) {
										_elem49 = new AnnotationValue();
										_elem49.read(iprot);
										_val46.add(_elem49);
									}
									iprot.readListEnd();
								}
								struct.annotations.put(_key45, _val46);
							}
							iprot.readMapEnd();
						}
						struct.setAnnotationsIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				default:
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();
			struct.validate();
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot, PessoaAnnotation struct) throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			if (struct.pessoa != null) {
				oprot.writeFieldBegin(PESSOA_FIELD_DESC);
				struct.pessoa.write(oprot);
				oprot.writeFieldEnd();
			}
			if (struct.annotations != null) {
				oprot.writeFieldBegin(ANNOTATIONS_FIELD_DESC);
				{
					oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.LIST,
							struct.annotations.size()));
					for (Map.Entry<AnnotationType, List<AnnotationValue>> _iter51 : struct.annotations.entrySet()) {
						oprot.writeI32(_iter51.getKey().getValue());
						{
							oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, _iter51.getValue().size()));
							for (AnnotationValue _iter52 : _iter51.getValue()) {
								_iter52.write(oprot);
							}
							oprot.writeListEnd();
						}
					}
					oprot.writeMapEnd();
				}
				oprot.writeFieldEnd();
			}
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class PessoaAnnotationTupleSchemeFactory implements SchemeFactory {
		public PessoaAnnotationTupleScheme getScheme() {
			return new PessoaAnnotationTupleScheme();
		}
	}

	private static class PessoaAnnotationTupleScheme extends TupleScheme<PessoaAnnotation> {

		@Override
		public void write(org.apache.thrift.protocol.TProtocol prot, PessoaAnnotation struct) throws org.apache.thrift.TException {
			TTupleProtocol oprot = (TTupleProtocol) prot;
			struct.pessoa.write(oprot);
			{
				oprot.writeI32(struct.annotations.size());
				for (Map.Entry<AnnotationType, List<AnnotationValue>> _iter53 : struct.annotations.entrySet()) {
					oprot.writeI32(_iter53.getKey().getValue());
					{
						oprot.writeI32(_iter53.getValue().size());
						for (AnnotationValue _iter54 : _iter53.getValue()) {
							_iter54.write(oprot);
						}
					}
				}
			}
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol prot, PessoaAnnotation struct) throws org.apache.thrift.TException {
			TTupleProtocol iprot = (TTupleProtocol) prot;
			struct.pessoa = new br.org.stela.intelectus.lattes.thrift.Pessoa();
			struct.pessoa.read(iprot);
			struct.setPessoaIsSet(true);
			{
				org.apache.thrift.protocol.TMap _map55 =
						new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
				struct.annotations = new HashMap<AnnotationType, List<AnnotationValue>>(2 * _map55.size);
				AnnotationType _key56;
				List<AnnotationValue> _val57;
				for (int _i58 = 0; _i58 < _map55.size; ++_i58) {
					_key56 = br.org.stela.intelectus.service.thrift.AnnotationType.findByValue(iprot.readI32());
					{
						org.apache.thrift.protocol.TList _list59 =
								new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
						_val57 = new ArrayList<AnnotationValue>(_list59.size);
						AnnotationValue _elem60;
						for (int _i61 = 0; _i61 < _list59.size; ++_i61) {
							_elem60 = new AnnotationValue();
							_elem60.read(iprot);
							_val57.add(_elem60);
						}
					}
					struct.annotations.put(_key56, _val57);
				}
			}
			struct.setAnnotationsIsSet(true);
		}
	}

}
