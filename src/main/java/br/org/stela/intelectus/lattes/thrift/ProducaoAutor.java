/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package br.org.stela.intelectus.lattes.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-6-9")
public class ProducaoAutor
		implements org.apache.thrift.TBase<ProducaoAutor, ProducaoAutor._Fields>, java.io.Serializable, Cloneable, Comparable<ProducaoAutor> {
	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ProducaoAutor");

	private static final org.apache.thrift.protocol.TField NRO_ID_CNPQ_FIELD_DESC =
			new org.apache.thrift.protocol.TField("nroIdCnpq", org.apache.thrift.protocol.TType.STRING, (short) 1);
	private static final org.apache.thrift.protocol.TField SEQ_PRODUCAO_FIELD_DESC =
			new org.apache.thrift.protocol.TField("seqProducao", org.apache.thrift.protocol.TType.I64, (short) 2);
	private static final org.apache.thrift.protocol.TField SEQ_COAUTOR_FIELD_DESC =
			new org.apache.thrift.protocol.TField("seqCoautor", org.apache.thrift.protocol.TType.I64, (short) 3);
	private static final org.apache.thrift.protocol.TField SEQ_ORDEM_AUTORIA_FIELD_DESC =
			new org.apache.thrift.protocol.TField("seqOrdemAutoria", org.apache.thrift.protocol.TType.I32, (short) 4);
	private static final org.apache.thrift.protocol.TField NME_COAUTOR_FIELD_DESC =
			new org.apache.thrift.protocol.TField("nmeCoautor", org.apache.thrift.protocol.TType.STRING, (short) 5);
	private static final org.apache.thrift.protocol.TField NME_CITACAO_BIBLIOGRAFICA_FIELD_DESC =
			new org.apache.thrift.protocol.TField("nmeCitacaoBibliografica", org.apache.thrift.protocol.TType.STRING, (short) 6);
	private static final org.apache.thrift.protocol.TField NRO_ID_CNPQ_COAUTOR_FIELD_DESC =
			new org.apache.thrift.protocol.TField("nroIdCnpqCoautor", org.apache.thrift.protocol.TType.STRING, (short) 7);

	private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

	static {
		schemes.put(StandardScheme.class, new ProducaoAutorStandardSchemeFactory());
		schemes.put(TupleScheme.class, new ProducaoAutorTupleSchemeFactory());
	}

	private String nroIdCnpq; // required
	private long seqProducao; // required
	private long seqCoautor; // required
	private int seqOrdemAutoria; // required
	private String nmeCoautor; // optional
	private String nmeCitacaoBibliografica; // optional
	private String nroIdCnpqCoautor; // optional

	/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {
		NRO_ID_CNPQ((short) 1, "nroIdCnpq"),
		SEQ_PRODUCAO((short) 2, "seqProducao"),
		SEQ_COAUTOR((short) 3, "seqCoautor"),
		SEQ_ORDEM_AUTORIA((short) 4, "seqOrdemAutoria"),
		NME_COAUTOR((short) 5, "nmeCoautor"),
		NME_CITACAO_BIBLIOGRAFICA((short) 6, "nmeCitacaoBibliografica"),
		NRO_ID_CNPQ_COAUTOR((short) 7, "nroIdCnpqCoautor");

		private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

		static {
			for (_Fields field : EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not found.
		 */
		public static _Fields findByThriftId(int fieldId) {
			switch (fieldId) {
			case 1: // NRO_ID_CNPQ
				return NRO_ID_CNPQ;
			case 2: // SEQ_PRODUCAO
				return SEQ_PRODUCAO;
			case 3: // SEQ_COAUTOR
				return SEQ_COAUTOR;
			case 4: // SEQ_ORDEM_AUTORIA
				return SEQ_ORDEM_AUTORIA;
			case 5: // NME_COAUTOR
				return NME_COAUTOR;
			case 6: // NME_CITACAO_BIBLIOGRAFICA
				return NME_CITACAO_BIBLIOGRAFICA;
			case 7: // NRO_ID_CNPQ_COAUTOR
				return NRO_ID_CNPQ_COAUTOR;
			default:
				return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null)
				throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not found.
		 */
		public static _Fields findByName(String name) {
			return byName.get(name);
		}

		private final short _thriftId;
		private final String _fieldName;

		_Fields(short thriftId, String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public String getFieldName() {
			return _fieldName;
		}
	}

	// isset id assignments
	private static final int __SEQPRODUCAO_ISSET_ID = 0;
	private static final int __SEQCOAUTOR_ISSET_ID = 1;
	private static final int __SEQORDEMAUTORIA_ISSET_ID = 2;
	private byte __isset_bitfield = 0;
	private static final _Fields optionals[] = {_Fields.NME_COAUTOR, _Fields.NME_CITACAO_BIBLIOGRAFICA, _Fields.NRO_ID_CNPQ_COAUTOR};
	public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

	static {
		Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
		tmpMap.put(_Fields.NRO_ID_CNPQ, new org.apache.thrift.meta_data.FieldMetaData("nroIdCnpq", org.apache.thrift.TFieldRequirementType.REQUIRED,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.SEQ_PRODUCAO, new org.apache.thrift.meta_data.FieldMetaData("seqProducao", org.apache.thrift.TFieldRequirementType.REQUIRED,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64, "long")));
		tmpMap.put(_Fields.SEQ_COAUTOR, new org.apache.thrift.meta_data.FieldMetaData("seqCoautor", org.apache.thrift.TFieldRequirementType.REQUIRED,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64, "long")));
		tmpMap.put(_Fields.SEQ_ORDEM_AUTORIA, new org.apache.thrift.meta_data.FieldMetaData("seqOrdemAutoria", org.apache.thrift.TFieldRequirementType.REQUIRED,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32, "int")));
		tmpMap.put(_Fields.NME_COAUTOR, new org.apache.thrift.meta_data.FieldMetaData("nmeCoautor", org.apache.thrift.TFieldRequirementType.OPTIONAL,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.NME_CITACAO_BIBLIOGRAFICA, new org.apache.thrift.meta_data.FieldMetaData("nmeCitacaoBibliografica",
				org.apache.thrift.TFieldRequirementType.OPTIONAL, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.NRO_ID_CNPQ_COAUTOR, new org.apache.thrift.meta_data.FieldMetaData("nroIdCnpqCoautor",
				org.apache.thrift.TFieldRequirementType.OPTIONAL, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		metaDataMap = Collections.unmodifiableMap(tmpMap);
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ProducaoAutor.class, metaDataMap);
	}

	public ProducaoAutor() {
	}

	public ProducaoAutor(String nroIdCnpq, long seqProducao, long seqCoautor, int seqOrdemAutoria) {
		this();
		this.nroIdCnpq = nroIdCnpq;
		this.seqProducao = seqProducao;
		setSeqProducaoIsSet(true);
		this.seqCoautor = seqCoautor;
		setSeqCoautorIsSet(true);
		this.seqOrdemAutoria = seqOrdemAutoria;
		setSeqOrdemAutoriaIsSet(true);
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public ProducaoAutor(ProducaoAutor other) {
		__isset_bitfield = other.__isset_bitfield;
		if (other.isSetNroIdCnpq()) {
			this.nroIdCnpq = other.nroIdCnpq;
		}
		this.seqProducao = other.seqProducao;
		this.seqCoautor = other.seqCoautor;
		this.seqOrdemAutoria = other.seqOrdemAutoria;
		if (other.isSetNmeCoautor()) {
			this.nmeCoautor = other.nmeCoautor;
		}
		if (other.isSetNmeCitacaoBibliografica()) {
			this.nmeCitacaoBibliografica = other.nmeCitacaoBibliografica;
		}
		if (other.isSetNroIdCnpqCoautor()) {
			this.nroIdCnpqCoautor = other.nroIdCnpqCoautor;
		}
	}

	public ProducaoAutor deepCopy() {
		return new ProducaoAutor(this);
	}

	@Override
	public void clear() {
		this.nroIdCnpq = null;
		setSeqProducaoIsSet(false);
		this.seqProducao = 0;
		setSeqCoautorIsSet(false);
		this.seqCoautor = 0;
		setSeqOrdemAutoriaIsSet(false);
		this.seqOrdemAutoria = 0;
		this.nmeCoautor = null;
		this.nmeCitacaoBibliografica = null;
		this.nroIdCnpqCoautor = null;
	}

	public String getNroIdCnpq() {
		return this.nroIdCnpq;
	}

	public void setNroIdCnpq(String nroIdCnpq) {
		this.nroIdCnpq = nroIdCnpq;
	}

	public void unsetNroIdCnpq() {
		this.nroIdCnpq = null;
	}

	/** Returns true if field nroIdCnpq is set (has been assigned a value) and false otherwise */
	public boolean isSetNroIdCnpq() {
		return this.nroIdCnpq != null;
	}

	public void setNroIdCnpqIsSet(boolean value) {
		if (!value) {
			this.nroIdCnpq = null;
		}
	}

	public long getSeqProducao() {
		return this.seqProducao;
	}

	public void setSeqProducao(long seqProducao) {
		this.seqProducao = seqProducao;
		setSeqProducaoIsSet(true);
	}

	public void unsetSeqProducao() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SEQPRODUCAO_ISSET_ID);
	}

	/** Returns true if field seqProducao is set (has been assigned a value) and false otherwise */
	public boolean isSetSeqProducao() {
		return EncodingUtils.testBit(__isset_bitfield, __SEQPRODUCAO_ISSET_ID);
	}

	public void setSeqProducaoIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SEQPRODUCAO_ISSET_ID, value);
	}

	public long getSeqCoautor() {
		return this.seqCoautor;
	}

	public void setSeqCoautor(long seqCoautor) {
		this.seqCoautor = seqCoautor;
		setSeqCoautorIsSet(true);
	}

	public void unsetSeqCoautor() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SEQCOAUTOR_ISSET_ID);
	}

	/** Returns true if field seqCoautor is set (has been assigned a value) and false otherwise */
	public boolean isSetSeqCoautor() {
		return EncodingUtils.testBit(__isset_bitfield, __SEQCOAUTOR_ISSET_ID);
	}

	public void setSeqCoautorIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SEQCOAUTOR_ISSET_ID, value);
	}

	public int getSeqOrdemAutoria() {
		return this.seqOrdemAutoria;
	}

	public void setSeqOrdemAutoria(int seqOrdemAutoria) {
		this.seqOrdemAutoria = seqOrdemAutoria;
		setSeqOrdemAutoriaIsSet(true);
	}

	public void unsetSeqOrdemAutoria() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SEQORDEMAUTORIA_ISSET_ID);
	}

	/** Returns true if field seqOrdemAutoria is set (has been assigned a value) and false otherwise */
	public boolean isSetSeqOrdemAutoria() {
		return EncodingUtils.testBit(__isset_bitfield, __SEQORDEMAUTORIA_ISSET_ID);
	}

	public void setSeqOrdemAutoriaIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SEQORDEMAUTORIA_ISSET_ID, value);
	}

	public String getNmeCoautor() {
		return this.nmeCoautor;
	}

	public void setNmeCoautor(String nmeCoautor) {
		this.nmeCoautor = nmeCoautor;
	}

	public void unsetNmeCoautor() {
		this.nmeCoautor = null;
	}

	/** Returns true if field nmeCoautor is set (has been assigned a value) and false otherwise */
	public boolean isSetNmeCoautor() {
		return this.nmeCoautor != null;
	}

	public void setNmeCoautorIsSet(boolean value) {
		if (!value) {
			this.nmeCoautor = null;
		}
	}

	public String getNmeCitacaoBibliografica() {
		return this.nmeCitacaoBibliografica;
	}

	public void setNmeCitacaoBibliografica(String nmeCitacaoBibliografica) {
		this.nmeCitacaoBibliografica = nmeCitacaoBibliografica;
	}

	public void unsetNmeCitacaoBibliografica() {
		this.nmeCitacaoBibliografica = null;
	}

	/** Returns true if field nmeCitacaoBibliografica is set (has been assigned a value) and false otherwise */
	public boolean isSetNmeCitacaoBibliografica() {
		return this.nmeCitacaoBibliografica != null;
	}

	public void setNmeCitacaoBibliograficaIsSet(boolean value) {
		if (!value) {
			this.nmeCitacaoBibliografica = null;
		}
	}

	public String getNroIdCnpqCoautor() {
		return this.nroIdCnpqCoautor;
	}

	public void setNroIdCnpqCoautor(String nroIdCnpqCoautor) {
		this.nroIdCnpqCoautor = nroIdCnpqCoautor;
	}

	public void unsetNroIdCnpqCoautor() {
		this.nroIdCnpqCoautor = null;
	}

	/** Returns true if field nroIdCnpqCoautor is set (has been assigned a value) and false otherwise */
	public boolean isSetNroIdCnpqCoautor() {
		return this.nroIdCnpqCoautor != null;
	}

	public void setNroIdCnpqCoautorIsSet(boolean value) {
		if (!value) {
			this.nroIdCnpqCoautor = null;
		}
	}

	public void setFieldValue(_Fields field, Object value) {
		switch (field) {
		case NRO_ID_CNPQ:
			if (value == null) {
				unsetNroIdCnpq();
			} else {
				setNroIdCnpq((String) value);
			}
			break;

		case SEQ_PRODUCAO:
			if (value == null) {
				unsetSeqProducao();
			} else {
				setSeqProducao((Long) value);
			}
			break;

		case SEQ_COAUTOR:
			if (value == null) {
				unsetSeqCoautor();
			} else {
				setSeqCoautor((Long) value);
			}
			break;

		case SEQ_ORDEM_AUTORIA:
			if (value == null) {
				unsetSeqOrdemAutoria();
			} else {
				setSeqOrdemAutoria((Integer) value);
			}
			break;

		case NME_COAUTOR:
			if (value == null) {
				unsetNmeCoautor();
			} else {
				setNmeCoautor((String) value);
			}
			break;

		case NME_CITACAO_BIBLIOGRAFICA:
			if (value == null) {
				unsetNmeCitacaoBibliografica();
			} else {
				setNmeCitacaoBibliografica((String) value);
			}
			break;

		case NRO_ID_CNPQ_COAUTOR:
			if (value == null) {
				unsetNroIdCnpqCoautor();
			} else {
				setNroIdCnpqCoautor((String) value);
			}
			break;

		}
	}

	public Object getFieldValue(_Fields field) {
		switch (field) {
		case NRO_ID_CNPQ:
			return getNroIdCnpq();

		case SEQ_PRODUCAO:
			return Long.valueOf(getSeqProducao());

		case SEQ_COAUTOR:
			return Long.valueOf(getSeqCoautor());

		case SEQ_ORDEM_AUTORIA:
			return Integer.valueOf(getSeqOrdemAutoria());

		case NME_COAUTOR:
			return getNmeCoautor();

		case NME_CITACAO_BIBLIOGRAFICA:
			return getNmeCitacaoBibliografica();

		case NRO_ID_CNPQ_COAUTOR:
			return getNroIdCnpqCoautor();

		}
		throw new IllegalStateException();
	}

	/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
	public boolean isSet(_Fields field) {
		if (field == null) {
			throw new IllegalArgumentException();
		}

		switch (field) {
		case NRO_ID_CNPQ:
			return isSetNroIdCnpq();
		case SEQ_PRODUCAO:
			return isSetSeqProducao();
		case SEQ_COAUTOR:
			return isSetSeqCoautor();
		case SEQ_ORDEM_AUTORIA:
			return isSetSeqOrdemAutoria();
		case NME_COAUTOR:
			return isSetNmeCoautor();
		case NME_CITACAO_BIBLIOGRAFICA:
			return isSetNmeCitacaoBibliografica();
		case NRO_ID_CNPQ_COAUTOR:
			return isSetNroIdCnpqCoautor();
		}
		throw new IllegalStateException();
	}

	@Override
	public boolean equals(Object that) {
		if (that == null)
			return false;
		if (that instanceof ProducaoAutor)
			return this.equals((ProducaoAutor) that);
		return false;
	}

	public boolean equals(ProducaoAutor that) {
		if (that == null)
			return false;

		boolean this_present_nroIdCnpq = true && this.isSetNroIdCnpq();
		boolean that_present_nroIdCnpq = true && that.isSetNroIdCnpq();
		if (this_present_nroIdCnpq || that_present_nroIdCnpq) {
			if (!(this_present_nroIdCnpq && that_present_nroIdCnpq))
				return false;
			if (!this.nroIdCnpq.equals(that.nroIdCnpq))
				return false;
		}

		boolean this_present_seqProducao = true;
		boolean that_present_seqProducao = true;
		if (this_present_seqProducao || that_present_seqProducao) {
			if (!(this_present_seqProducao && that_present_seqProducao))
				return false;
			if (this.seqProducao != that.seqProducao)
				return false;
		}

		boolean this_present_seqCoautor = true;
		boolean that_present_seqCoautor = true;
		if (this_present_seqCoautor || that_present_seqCoautor) {
			if (!(this_present_seqCoautor && that_present_seqCoautor))
				return false;
			if (this.seqCoautor != that.seqCoautor)
				return false;
		}

		boolean this_present_seqOrdemAutoria = true;
		boolean that_present_seqOrdemAutoria = true;
		if (this_present_seqOrdemAutoria || that_present_seqOrdemAutoria) {
			if (!(this_present_seqOrdemAutoria && that_present_seqOrdemAutoria))
				return false;
			if (this.seqOrdemAutoria != that.seqOrdemAutoria)
				return false;
		}

		boolean this_present_nmeCoautor = true && this.isSetNmeCoautor();
		boolean that_present_nmeCoautor = true && that.isSetNmeCoautor();
		if (this_present_nmeCoautor || that_present_nmeCoautor) {
			if (!(this_present_nmeCoautor && that_present_nmeCoautor))
				return false;
			if (!this.nmeCoautor.equals(that.nmeCoautor))
				return false;
		}

		boolean this_present_nmeCitacaoBibliografica = true && this.isSetNmeCitacaoBibliografica();
		boolean that_present_nmeCitacaoBibliografica = true && that.isSetNmeCitacaoBibliografica();
		if (this_present_nmeCitacaoBibliografica || that_present_nmeCitacaoBibliografica) {
			if (!(this_present_nmeCitacaoBibliografica && that_present_nmeCitacaoBibliografica))
				return false;
			if (!this.nmeCitacaoBibliografica.equals(that.nmeCitacaoBibliografica))
				return false;
		}

		boolean this_present_nroIdCnpqCoautor = true && this.isSetNroIdCnpqCoautor();
		boolean that_present_nroIdCnpqCoautor = true && that.isSetNroIdCnpqCoautor();
		if (this_present_nroIdCnpqCoautor || that_present_nroIdCnpqCoautor) {
			if (!(this_present_nroIdCnpqCoautor && that_present_nroIdCnpqCoautor))
				return false;
			if (!this.nroIdCnpqCoautor.equals(that.nroIdCnpqCoautor))
				return false;
		}

		return true;
	}

	@Override
	public int hashCode() {
		List<Object> list = new ArrayList<Object>();

		boolean present_nroIdCnpq = true && (isSetNroIdCnpq());
		list.add(present_nroIdCnpq);
		if (present_nroIdCnpq)
			list.add(nroIdCnpq);

		boolean present_seqProducao = true;
		list.add(present_seqProducao);
		if (present_seqProducao)
			list.add(seqProducao);

		boolean present_seqCoautor = true;
		list.add(present_seqCoautor);
		if (present_seqCoautor)
			list.add(seqCoautor);

		boolean present_seqOrdemAutoria = true;
		list.add(present_seqOrdemAutoria);
		if (present_seqOrdemAutoria)
			list.add(seqOrdemAutoria);

		boolean present_nmeCoautor = true && (isSetNmeCoautor());
		list.add(present_nmeCoautor);
		if (present_nmeCoautor)
			list.add(nmeCoautor);

		boolean present_nmeCitacaoBibliografica = true && (isSetNmeCitacaoBibliografica());
		list.add(present_nmeCitacaoBibliografica);
		if (present_nmeCitacaoBibliografica)
			list.add(nmeCitacaoBibliografica);

		boolean present_nroIdCnpqCoautor = true && (isSetNroIdCnpqCoautor());
		list.add(present_nroIdCnpqCoautor);
		if (present_nroIdCnpqCoautor)
			list.add(nroIdCnpqCoautor);

		return list.hashCode();
	}

	@Override
	public int compareTo(ProducaoAutor other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;

		lastComparison = Boolean.valueOf(isSetNroIdCnpq()).compareTo(other.isSetNroIdCnpq());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetNroIdCnpq()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nroIdCnpq, other.nroIdCnpq);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetSeqProducao()).compareTo(other.isSetSeqProducao());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetSeqProducao()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.seqProducao, other.seqProducao);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetSeqCoautor()).compareTo(other.isSetSeqCoautor());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetSeqCoautor()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.seqCoautor, other.seqCoautor);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetSeqOrdemAutoria()).compareTo(other.isSetSeqOrdemAutoria());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetSeqOrdemAutoria()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.seqOrdemAutoria, other.seqOrdemAutoria);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetNmeCoautor()).compareTo(other.isSetNmeCoautor());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetNmeCoautor()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nmeCoautor, other.nmeCoautor);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetNmeCitacaoBibliografica()).compareTo(other.isSetNmeCitacaoBibliografica());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetNmeCitacaoBibliografica()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nmeCitacaoBibliografica, other.nmeCitacaoBibliografica);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetNroIdCnpqCoautor()).compareTo(other.isSetNroIdCnpqCoautor());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetNroIdCnpqCoautor()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nroIdCnpqCoautor, other.nroIdCnpqCoautor);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		return 0;
	}

	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
		schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
		schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder("ProducaoAutor(");
		boolean first = true;

		sb.append("nroIdCnpq:");
		if (this.nroIdCnpq == null) {
			sb.append("null");
		} else {
			sb.append(this.nroIdCnpq);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("seqProducao:");
		sb.append(this.seqProducao);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("seqCoautor:");
		sb.append(this.seqCoautor);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("seqOrdemAutoria:");
		sb.append(this.seqOrdemAutoria);
		first = false;
		if (isSetNmeCoautor()) {
			if (!first)
				sb.append(", ");
			sb.append("nmeCoautor:");
			if (this.nmeCoautor == null) {
				sb.append("null");
			} else {
				sb.append(this.nmeCoautor);
			}
			first = false;
		}
		if (isSetNmeCitacaoBibliografica()) {
			if (!first)
				sb.append(", ");
			sb.append("nmeCitacaoBibliografica:");
			if (this.nmeCitacaoBibliografica == null) {
				sb.append("null");
			} else {
				sb.append(this.nmeCitacaoBibliografica);
			}
			first = false;
		}
		if (isSetNroIdCnpqCoautor()) {
			if (!first)
				sb.append(", ");
			sb.append("nroIdCnpqCoautor:");
			if (this.nroIdCnpqCoautor == null) {
				sb.append("null");
			} else {
				sb.append(this.nroIdCnpqCoautor);
			}
			first = false;
		}
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
		if (!isSetNroIdCnpq()) {
			throw new org.apache.thrift.protocol.TProtocolException("Required field 'nroIdCnpq' is unset! Struct:" + toString());
		}

		if (!isSetSeqProducao()) {
			throw new org.apache.thrift.protocol.TProtocolException("Required field 'seqProducao' is unset! Struct:" + toString());
		}

		if (!isSetSeqCoautor()) {
			throw new org.apache.thrift.protocol.TProtocolException("Required field 'seqCoautor' is unset! Struct:" + toString());
		}

		if (!isSetSeqOrdemAutoria()) {
			throw new org.apache.thrift.protocol.TProtocolException("Required field 'seqOrdemAutoria' is unset! Struct:" + toString());
		}

		// check for sub-struct validity
	}

	private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
		try {
			// it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
			__isset_bitfield = 0;
			read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private static class ProducaoAutorStandardSchemeFactory implements SchemeFactory {
		public ProducaoAutorStandardScheme getScheme() {
			return new ProducaoAutorStandardScheme();
		}
	}

	private static class ProducaoAutorStandardScheme extends StandardScheme<ProducaoAutor> {

		public void read(org.apache.thrift.protocol.TProtocol iprot, ProducaoAutor struct) throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (schemeField.id) {
				case 1: // NRO_ID_CNPQ
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.nroIdCnpq = iprot.readString();
						struct.setNroIdCnpqIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 2: // SEQ_PRODUCAO
					if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
						struct.seqProducao = iprot.readI64();
						struct.setSeqProducaoIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 3: // SEQ_COAUTOR
					if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
						struct.seqCoautor = iprot.readI64();
						struct.setSeqCoautorIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 4: // SEQ_ORDEM_AUTORIA
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.seqOrdemAutoria = iprot.readI32();
						struct.setSeqOrdemAutoriaIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 5: // NME_COAUTOR
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.nmeCoautor = iprot.readString();
						struct.setNmeCoautorIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 6: // NME_CITACAO_BIBLIOGRAFICA
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.nmeCitacaoBibliografica = iprot.readString();
						struct.setNmeCitacaoBibliograficaIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 7: // NRO_ID_CNPQ_COAUTOR
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.nroIdCnpqCoautor = iprot.readString();
						struct.setNroIdCnpqCoautorIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				default:
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();
			struct.validate();
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot, ProducaoAutor struct) throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			if (struct.nroIdCnpq != null) {
				oprot.writeFieldBegin(NRO_ID_CNPQ_FIELD_DESC);
				oprot.writeString(struct.nroIdCnpq);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldBegin(SEQ_PRODUCAO_FIELD_DESC);
			oprot.writeI64(struct.seqProducao);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(SEQ_COAUTOR_FIELD_DESC);
			oprot.writeI64(struct.seqCoautor);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(SEQ_ORDEM_AUTORIA_FIELD_DESC);
			oprot.writeI32(struct.seqOrdemAutoria);
			oprot.writeFieldEnd();
			if (struct.nmeCoautor != null) {
				if (struct.isSetNmeCoautor()) {
					oprot.writeFieldBegin(NME_COAUTOR_FIELD_DESC);
					oprot.writeString(struct.nmeCoautor);
					oprot.writeFieldEnd();
				}
			}
			if (struct.nmeCitacaoBibliografica != null) {
				if (struct.isSetNmeCitacaoBibliografica()) {
					oprot.writeFieldBegin(NME_CITACAO_BIBLIOGRAFICA_FIELD_DESC);
					oprot.writeString(struct.nmeCitacaoBibliografica);
					oprot.writeFieldEnd();
				}
			}
			if (struct.nroIdCnpqCoautor != null) {
				if (struct.isSetNroIdCnpqCoautor()) {
					oprot.writeFieldBegin(NRO_ID_CNPQ_COAUTOR_FIELD_DESC);
					oprot.writeString(struct.nroIdCnpqCoautor);
					oprot.writeFieldEnd();
				}
			}
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class ProducaoAutorTupleSchemeFactory implements SchemeFactory {
		public ProducaoAutorTupleScheme getScheme() {
			return new ProducaoAutorTupleScheme();
		}
	}

	private static class ProducaoAutorTupleScheme extends TupleScheme<ProducaoAutor> {

		@Override
		public void write(org.apache.thrift.protocol.TProtocol prot, ProducaoAutor struct) throws org.apache.thrift.TException {
			TTupleProtocol oprot = (TTupleProtocol) prot;
			oprot.writeString(struct.nroIdCnpq);
			oprot.writeI64(struct.seqProducao);
			oprot.writeI64(struct.seqCoautor);
			oprot.writeI32(struct.seqOrdemAutoria);
			BitSet optionals = new BitSet();
			if (struct.isSetNmeCoautor()) {
				optionals.set(0);
			}
			if (struct.isSetNmeCitacaoBibliografica()) {
				optionals.set(1);
			}
			if (struct.isSetNroIdCnpqCoautor()) {
				optionals.set(2);
			}
			oprot.writeBitSet(optionals, 3);
			if (struct.isSetNmeCoautor()) {
				oprot.writeString(struct.nmeCoautor);
			}
			if (struct.isSetNmeCitacaoBibliografica()) {
				oprot.writeString(struct.nmeCitacaoBibliografica);
			}
			if (struct.isSetNroIdCnpqCoautor()) {
				oprot.writeString(struct.nroIdCnpqCoautor);
			}
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol prot, ProducaoAutor struct) throws org.apache.thrift.TException {
			TTupleProtocol iprot = (TTupleProtocol) prot;
			struct.nroIdCnpq = iprot.readString();
			struct.setNroIdCnpqIsSet(true);
			struct.seqProducao = iprot.readI64();
			struct.setSeqProducaoIsSet(true);
			struct.seqCoautor = iprot.readI64();
			struct.setSeqCoautorIsSet(true);
			struct.seqOrdemAutoria = iprot.readI32();
			struct.setSeqOrdemAutoriaIsSet(true);
			BitSet incoming = iprot.readBitSet(3);
			if (incoming.get(0)) {
				struct.nmeCoautor = iprot.readString();
				struct.setNmeCoautorIsSet(true);
			}
			if (incoming.get(1)) {
				struct.nmeCitacaoBibliografica = iprot.readString();
				struct.setNmeCitacaoBibliograficaIsSet(true);
			}
			if (incoming.get(2)) {
				struct.nroIdCnpqCoautor = iprot.readString();
				struct.setNroIdCnpqCoautorIsSet(true);
			}
		}
	}

}
