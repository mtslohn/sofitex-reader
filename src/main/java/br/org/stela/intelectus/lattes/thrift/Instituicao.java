/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package br.org.stela.intelectus.lattes.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-6-9")
public class Instituicao implements org.apache.thrift.TBase<Instituicao, Instituicao._Fields>, java.io.Serializable, Cloneable, Comparable<Instituicao> {
	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Instituicao");

	private static final org.apache.thrift.protocol.TField COD_INST_FIELD_DESC =
			new org.apache.thrift.protocol.TField("codInst", org.apache.thrift.protocol.TType.STRING, (short) 1);
	private static final org.apache.thrift.protocol.TField NME_INST_FIELD_DESC =
			new org.apache.thrift.protocol.TField("nmeInst", org.apache.thrift.protocol.TType.STRING, (short) 2);
	private static final org.apache.thrift.protocol.TField SGL_INST_FIELD_DESC =
			new org.apache.thrift.protocol.TField("sglInst", org.apache.thrift.protocol.TType.STRING, (short) 3);
	private static final org.apache.thrift.protocol.TField DSC_ABREV_INST_FIELD_DESC =
			new org.apache.thrift.protocol.TField("dscAbrevInst", org.apache.thrift.protocol.TType.STRING, (short) 4);
	private static final org.apache.thrift.protocol.TField DSC_UF_INST_FIELD_DESC =
			new org.apache.thrift.protocol.TField("dscUfInst", org.apache.thrift.protocol.TType.STRING, (short) 5);
	private static final org.apache.thrift.protocol.TField DSC_REGIAO_INST_FIELD_DESC =
			new org.apache.thrift.protocol.TField("dscRegiaoInst", org.apache.thrift.protocol.TType.STRING, (short) 6);
	private static final org.apache.thrift.protocol.TField COD_SETOR_ECON_FIELD_DESC =
			new org.apache.thrift.protocol.TField("codSetorEcon", org.apache.thrift.protocol.TType.STRING, (short) 7);
	private static final org.apache.thrift.protocol.TField DSC_SETOR_ECON_FIELD_DESC =
			new org.apache.thrift.protocol.TField("dscSetorEcon", org.apache.thrift.protocol.TType.STRING, (short) 8);

	private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

	static {
		schemes.put(StandardScheme.class, new InstituicaoStandardSchemeFactory());
		schemes.put(TupleScheme.class, new InstituicaoTupleSchemeFactory());
	}

	private String codInst; // required
	private String nmeInst; // required
	private String sglInst; // optional
	private String dscAbrevInst; // optional
	private String dscUfInst; // optional
	private String dscRegiaoInst; // optional
	private String codSetorEcon; // optional
	private String dscSetorEcon; // optional

	/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {
		COD_INST((short) 1, "codInst"),
		NME_INST((short) 2, "nmeInst"),
		SGL_INST((short) 3, "sglInst"),
		DSC_ABREV_INST((short) 4, "dscAbrevInst"),
		DSC_UF_INST((short) 5, "dscUfInst"),
		DSC_REGIAO_INST((short) 6, "dscRegiaoInst"),
		COD_SETOR_ECON((short) 7, "codSetorEcon"),
		DSC_SETOR_ECON((short) 8, "dscSetorEcon");

		private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

		static {
			for (_Fields field : EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not found.
		 */
		public static _Fields findByThriftId(int fieldId) {
			switch (fieldId) {
			case 1: // COD_INST
				return COD_INST;
			case 2: // NME_INST
				return NME_INST;
			case 3: // SGL_INST
				return SGL_INST;
			case 4: // DSC_ABREV_INST
				return DSC_ABREV_INST;
			case 5: // DSC_UF_INST
				return DSC_UF_INST;
			case 6: // DSC_REGIAO_INST
				return DSC_REGIAO_INST;
			case 7: // COD_SETOR_ECON
				return COD_SETOR_ECON;
			case 8: // DSC_SETOR_ECON
				return DSC_SETOR_ECON;
			default:
				return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null)
				throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not found.
		 */
		public static _Fields findByName(String name) {
			return byName.get(name);
		}

		private final short _thriftId;
		private final String _fieldName;

		_Fields(short thriftId, String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public String getFieldName() {
			return _fieldName;
		}
	}

	// isset id assignments
	private static final _Fields optionals[] =
			{_Fields.SGL_INST, _Fields.DSC_ABREV_INST, _Fields.DSC_UF_INST, _Fields.DSC_REGIAO_INST, _Fields.COD_SETOR_ECON, _Fields.DSC_SETOR_ECON};
	public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

	static {
		Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
		tmpMap.put(_Fields.COD_INST, new org.apache.thrift.meta_data.FieldMetaData("codInst", org.apache.thrift.TFieldRequirementType.REQUIRED,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.NME_INST, new org.apache.thrift.meta_data.FieldMetaData("nmeInst", org.apache.thrift.TFieldRequirementType.REQUIRED,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.SGL_INST, new org.apache.thrift.meta_data.FieldMetaData("sglInst", org.apache.thrift.TFieldRequirementType.OPTIONAL,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.DSC_ABREV_INST, new org.apache.thrift.meta_data.FieldMetaData("dscAbrevInst", org.apache.thrift.TFieldRequirementType.OPTIONAL,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.DSC_UF_INST, new org.apache.thrift.meta_data.FieldMetaData("dscUfInst", org.apache.thrift.TFieldRequirementType.OPTIONAL,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.DSC_REGIAO_INST, new org.apache.thrift.meta_data.FieldMetaData("dscRegiaoInst", org.apache.thrift.TFieldRequirementType.OPTIONAL,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.COD_SETOR_ECON, new org.apache.thrift.meta_data.FieldMetaData("codSetorEcon", org.apache.thrift.TFieldRequirementType.OPTIONAL,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.DSC_SETOR_ECON, new org.apache.thrift.meta_data.FieldMetaData("dscSetorEcon", org.apache.thrift.TFieldRequirementType.OPTIONAL,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		metaDataMap = Collections.unmodifiableMap(tmpMap);
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Instituicao.class, metaDataMap);
	}

	public Instituicao() {
	}

	public Instituicao(String codInst, String nmeInst) {
		this();
		this.codInst = codInst;
		this.nmeInst = nmeInst;
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public Instituicao(Instituicao other) {
		if (other.isSetCodInst()) {
			this.codInst = other.codInst;
		}
		if (other.isSetNmeInst()) {
			this.nmeInst = other.nmeInst;
		}
		if (other.isSetSglInst()) {
			this.sglInst = other.sglInst;
		}
		if (other.isSetDscAbrevInst()) {
			this.dscAbrevInst = other.dscAbrevInst;
		}
		if (other.isSetDscUfInst()) {
			this.dscUfInst = other.dscUfInst;
		}
		if (other.isSetDscRegiaoInst()) {
			this.dscRegiaoInst = other.dscRegiaoInst;
		}
		if (other.isSetCodSetorEcon()) {
			this.codSetorEcon = other.codSetorEcon;
		}
		if (other.isSetDscSetorEcon()) {
			this.dscSetorEcon = other.dscSetorEcon;
		}
	}

	public Instituicao deepCopy() {
		return new Instituicao(this);
	}

	@Override
	public void clear() {
		this.codInst = null;
		this.nmeInst = null;
		this.sglInst = null;
		this.dscAbrevInst = null;
		this.dscUfInst = null;
		this.dscRegiaoInst = null;
		this.codSetorEcon = null;
		this.dscSetorEcon = null;
	}

	public String getCodInst() {
		return this.codInst;
	}

	public void setCodInst(String codInst) {
		this.codInst = codInst;
	}

	public void unsetCodInst() {
		this.codInst = null;
	}

	/** Returns true if field codInst is set (has been assigned a value) and false otherwise */
	public boolean isSetCodInst() {
		return this.codInst != null;
	}

	public void setCodInstIsSet(boolean value) {
		if (!value) {
			this.codInst = null;
		}
	}

	public String getNmeInst() {
		return this.nmeInst;
	}

	public void setNmeInst(String nmeInst) {
		this.nmeInst = nmeInst;
	}

	public void unsetNmeInst() {
		this.nmeInst = null;
	}

	/** Returns true if field nmeInst is set (has been assigned a value) and false otherwise */
	public boolean isSetNmeInst() {
		return this.nmeInst != null;
	}

	public void setNmeInstIsSet(boolean value) {
		if (!value) {
			this.nmeInst = null;
		}
	}

	public String getSglInst() {
		return this.sglInst;
	}

	public void setSglInst(String sglInst) {
		this.sglInst = sglInst;
	}

	public void unsetSglInst() {
		this.sglInst = null;
	}

	/** Returns true if field sglInst is set (has been assigned a value) and false otherwise */
	public boolean isSetSglInst() {
		return this.sglInst != null;
	}

	public void setSglInstIsSet(boolean value) {
		if (!value) {
			this.sglInst = null;
		}
	}

	public String getDscAbrevInst() {
		return this.dscAbrevInst;
	}

	public void setDscAbrevInst(String dscAbrevInst) {
		this.dscAbrevInst = dscAbrevInst;
	}

	public void unsetDscAbrevInst() {
		this.dscAbrevInst = null;
	}

	/** Returns true if field dscAbrevInst is set (has been assigned a value) and false otherwise */
	public boolean isSetDscAbrevInst() {
		return this.dscAbrevInst != null;
	}

	public void setDscAbrevInstIsSet(boolean value) {
		if (!value) {
			this.dscAbrevInst = null;
		}
	}

	public String getDscUfInst() {
		return this.dscUfInst;
	}

	public void setDscUfInst(String dscUfInst) {
		this.dscUfInst = dscUfInst;
	}

	public void unsetDscUfInst() {
		this.dscUfInst = null;
	}

	/** Returns true if field dscUfInst is set (has been assigned a value) and false otherwise */
	public boolean isSetDscUfInst() {
		return this.dscUfInst != null;
	}

	public void setDscUfInstIsSet(boolean value) {
		if (!value) {
			this.dscUfInst = null;
		}
	}

	public String getDscRegiaoInst() {
		return this.dscRegiaoInst;
	}

	public void setDscRegiaoInst(String dscRegiaoInst) {
		this.dscRegiaoInst = dscRegiaoInst;
	}

	public void unsetDscRegiaoInst() {
		this.dscRegiaoInst = null;
	}

	/** Returns true if field dscRegiaoInst is set (has been assigned a value) and false otherwise */
	public boolean isSetDscRegiaoInst() {
		return this.dscRegiaoInst != null;
	}

	public void setDscRegiaoInstIsSet(boolean value) {
		if (!value) {
			this.dscRegiaoInst = null;
		}
	}

	public String getCodSetorEcon() {
		return this.codSetorEcon;
	}

	public void setCodSetorEcon(String codSetorEcon) {
		this.codSetorEcon = codSetorEcon;
	}

	public void unsetCodSetorEcon() {
		this.codSetorEcon = null;
	}

	/** Returns true if field codSetorEcon is set (has been assigned a value) and false otherwise */
	public boolean isSetCodSetorEcon() {
		return this.codSetorEcon != null;
	}

	public void setCodSetorEconIsSet(boolean value) {
		if (!value) {
			this.codSetorEcon = null;
		}
	}

	public String getDscSetorEcon() {
		return this.dscSetorEcon;
	}

	public void setDscSetorEcon(String dscSetorEcon) {
		this.dscSetorEcon = dscSetorEcon;
	}

	public void unsetDscSetorEcon() {
		this.dscSetorEcon = null;
	}

	/** Returns true if field dscSetorEcon is set (has been assigned a value) and false otherwise */
	public boolean isSetDscSetorEcon() {
		return this.dscSetorEcon != null;
	}

	public void setDscSetorEconIsSet(boolean value) {
		if (!value) {
			this.dscSetorEcon = null;
		}
	}

	public void setFieldValue(_Fields field, Object value) {
		switch (field) {
		case COD_INST:
			if (value == null) {
				unsetCodInst();
			} else {
				setCodInst((String) value);
			}
			break;

		case NME_INST:
			if (value == null) {
				unsetNmeInst();
			} else {
				setNmeInst((String) value);
			}
			break;

		case SGL_INST:
			if (value == null) {
				unsetSglInst();
			} else {
				setSglInst((String) value);
			}
			break;

		case DSC_ABREV_INST:
			if (value == null) {
				unsetDscAbrevInst();
			} else {
				setDscAbrevInst((String) value);
			}
			break;

		case DSC_UF_INST:
			if (value == null) {
				unsetDscUfInst();
			} else {
				setDscUfInst((String) value);
			}
			break;

		case DSC_REGIAO_INST:
			if (value == null) {
				unsetDscRegiaoInst();
			} else {
				setDscRegiaoInst((String) value);
			}
			break;

		case COD_SETOR_ECON:
			if (value == null) {
				unsetCodSetorEcon();
			} else {
				setCodSetorEcon((String) value);
			}
			break;

		case DSC_SETOR_ECON:
			if (value == null) {
				unsetDscSetorEcon();
			} else {
				setDscSetorEcon((String) value);
			}
			break;

		}
	}

	public Object getFieldValue(_Fields field) {
		switch (field) {
		case COD_INST:
			return getCodInst();

		case NME_INST:
			return getNmeInst();

		case SGL_INST:
			return getSglInst();

		case DSC_ABREV_INST:
			return getDscAbrevInst();

		case DSC_UF_INST:
			return getDscUfInst();

		case DSC_REGIAO_INST:
			return getDscRegiaoInst();

		case COD_SETOR_ECON:
			return getCodSetorEcon();

		case DSC_SETOR_ECON:
			return getDscSetorEcon();

		}
		throw new IllegalStateException();
	}

	/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
	public boolean isSet(_Fields field) {
		if (field == null) {
			throw new IllegalArgumentException();
		}

		switch (field) {
		case COD_INST:
			return isSetCodInst();
		case NME_INST:
			return isSetNmeInst();
		case SGL_INST:
			return isSetSglInst();
		case DSC_ABREV_INST:
			return isSetDscAbrevInst();
		case DSC_UF_INST:
			return isSetDscUfInst();
		case DSC_REGIAO_INST:
			return isSetDscRegiaoInst();
		case COD_SETOR_ECON:
			return isSetCodSetorEcon();
		case DSC_SETOR_ECON:
			return isSetDscSetorEcon();
		}
		throw new IllegalStateException();
	}

	@Override
	public boolean equals(Object that) {
		if (that == null)
			return false;
		if (that instanceof Instituicao)
			return this.equals((Instituicao) that);
		return false;
	}

	public boolean equals(Instituicao that) {
		if (that == null)
			return false;

		boolean this_present_codInst = true && this.isSetCodInst();
		boolean that_present_codInst = true && that.isSetCodInst();
		if (this_present_codInst || that_present_codInst) {
			if (!(this_present_codInst && that_present_codInst))
				return false;
			if (!this.codInst.equals(that.codInst))
				return false;
		}

		boolean this_present_nmeInst = true && this.isSetNmeInst();
		boolean that_present_nmeInst = true && that.isSetNmeInst();
		if (this_present_nmeInst || that_present_nmeInst) {
			if (!(this_present_nmeInst && that_present_nmeInst))
				return false;
			if (!this.nmeInst.equals(that.nmeInst))
				return false;
		}

		boolean this_present_sglInst = true && this.isSetSglInst();
		boolean that_present_sglInst = true && that.isSetSglInst();
		if (this_present_sglInst || that_present_sglInst) {
			if (!(this_present_sglInst && that_present_sglInst))
				return false;
			if (!this.sglInst.equals(that.sglInst))
				return false;
		}

		boolean this_present_dscAbrevInst = true && this.isSetDscAbrevInst();
		boolean that_present_dscAbrevInst = true && that.isSetDscAbrevInst();
		if (this_present_dscAbrevInst || that_present_dscAbrevInst) {
			if (!(this_present_dscAbrevInst && that_present_dscAbrevInst))
				return false;
			if (!this.dscAbrevInst.equals(that.dscAbrevInst))
				return false;
		}

		boolean this_present_dscUfInst = true && this.isSetDscUfInst();
		boolean that_present_dscUfInst = true && that.isSetDscUfInst();
		if (this_present_dscUfInst || that_present_dscUfInst) {
			if (!(this_present_dscUfInst && that_present_dscUfInst))
				return false;
			if (!this.dscUfInst.equals(that.dscUfInst))
				return false;
		}

		boolean this_present_dscRegiaoInst = true && this.isSetDscRegiaoInst();
		boolean that_present_dscRegiaoInst = true && that.isSetDscRegiaoInst();
		if (this_present_dscRegiaoInst || that_present_dscRegiaoInst) {
			if (!(this_present_dscRegiaoInst && that_present_dscRegiaoInst))
				return false;
			if (!this.dscRegiaoInst.equals(that.dscRegiaoInst))
				return false;
		}

		boolean this_present_codSetorEcon = true && this.isSetCodSetorEcon();
		boolean that_present_codSetorEcon = true && that.isSetCodSetorEcon();
		if (this_present_codSetorEcon || that_present_codSetorEcon) {
			if (!(this_present_codSetorEcon && that_present_codSetorEcon))
				return false;
			if (!this.codSetorEcon.equals(that.codSetorEcon))
				return false;
		}

		boolean this_present_dscSetorEcon = true && this.isSetDscSetorEcon();
		boolean that_present_dscSetorEcon = true && that.isSetDscSetorEcon();
		if (this_present_dscSetorEcon || that_present_dscSetorEcon) {
			if (!(this_present_dscSetorEcon && that_present_dscSetorEcon))
				return false;
			if (!this.dscSetorEcon.equals(that.dscSetorEcon))
				return false;
		}

		return true;
	}

	@Override
	public int hashCode() {
		List<Object> list = new ArrayList<Object>();

		boolean present_codInst = true && (isSetCodInst());
		list.add(present_codInst);
		if (present_codInst)
			list.add(codInst);

		boolean present_nmeInst = true && (isSetNmeInst());
		list.add(present_nmeInst);
		if (present_nmeInst)
			list.add(nmeInst);

		boolean present_sglInst = true && (isSetSglInst());
		list.add(present_sglInst);
		if (present_sglInst)
			list.add(sglInst);

		boolean present_dscAbrevInst = true && (isSetDscAbrevInst());
		list.add(present_dscAbrevInst);
		if (present_dscAbrevInst)
			list.add(dscAbrevInst);

		boolean present_dscUfInst = true && (isSetDscUfInst());
		list.add(present_dscUfInst);
		if (present_dscUfInst)
			list.add(dscUfInst);

		boolean present_dscRegiaoInst = true && (isSetDscRegiaoInst());
		list.add(present_dscRegiaoInst);
		if (present_dscRegiaoInst)
			list.add(dscRegiaoInst);

		boolean present_codSetorEcon = true && (isSetCodSetorEcon());
		list.add(present_codSetorEcon);
		if (present_codSetorEcon)
			list.add(codSetorEcon);

		boolean present_dscSetorEcon = true && (isSetDscSetorEcon());
		list.add(present_dscSetorEcon);
		if (present_dscSetorEcon)
			list.add(dscSetorEcon);

		return list.hashCode();
	}

	@Override
	public int compareTo(Instituicao other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;

		lastComparison = Boolean.valueOf(isSetCodInst()).compareTo(other.isSetCodInst());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetCodInst()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.codInst, other.codInst);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetNmeInst()).compareTo(other.isSetNmeInst());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetNmeInst()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nmeInst, other.nmeInst);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetSglInst()).compareTo(other.isSetSglInst());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetSglInst()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sglInst, other.sglInst);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetDscAbrevInst()).compareTo(other.isSetDscAbrevInst());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetDscAbrevInst()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dscAbrevInst, other.dscAbrevInst);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetDscUfInst()).compareTo(other.isSetDscUfInst());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetDscUfInst()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dscUfInst, other.dscUfInst);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetDscRegiaoInst()).compareTo(other.isSetDscRegiaoInst());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetDscRegiaoInst()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dscRegiaoInst, other.dscRegiaoInst);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetCodSetorEcon()).compareTo(other.isSetCodSetorEcon());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetCodSetorEcon()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.codSetorEcon, other.codSetorEcon);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetDscSetorEcon()).compareTo(other.isSetDscSetorEcon());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetDscSetorEcon()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dscSetorEcon, other.dscSetorEcon);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		return 0;
	}

	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
		schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
		schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder("Instituicao(");
		boolean first = true;

		sb.append("codInst:");
		if (this.codInst == null) {
			sb.append("null");
		} else {
			sb.append(this.codInst);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("nmeInst:");
		if (this.nmeInst == null) {
			sb.append("null");
		} else {
			sb.append(this.nmeInst);
		}
		first = false;
		if (isSetSglInst()) {
			if (!first)
				sb.append(", ");
			sb.append("sglInst:");
			if (this.sglInst == null) {
				sb.append("null");
			} else {
				sb.append(this.sglInst);
			}
			first = false;
		}
		if (isSetDscAbrevInst()) {
			if (!first)
				sb.append(", ");
			sb.append("dscAbrevInst:");
			if (this.dscAbrevInst == null) {
				sb.append("null");
			} else {
				sb.append(this.dscAbrevInst);
			}
			first = false;
		}
		if (isSetDscUfInst()) {
			if (!first)
				sb.append(", ");
			sb.append("dscUfInst:");
			if (this.dscUfInst == null) {
				sb.append("null");
			} else {
				sb.append(this.dscUfInst);
			}
			first = false;
		}
		if (isSetDscRegiaoInst()) {
			if (!first)
				sb.append(", ");
			sb.append("dscRegiaoInst:");
			if (this.dscRegiaoInst == null) {
				sb.append("null");
			} else {
				sb.append(this.dscRegiaoInst);
			}
			first = false;
		}
		if (isSetCodSetorEcon()) {
			if (!first)
				sb.append(", ");
			sb.append("codSetorEcon:");
			if (this.codSetorEcon == null) {
				sb.append("null");
			} else {
				sb.append(this.codSetorEcon);
			}
			first = false;
		}
		if (isSetDscSetorEcon()) {
			if (!first)
				sb.append(", ");
			sb.append("dscSetorEcon:");
			if (this.dscSetorEcon == null) {
				sb.append("null");
			} else {
				sb.append(this.dscSetorEcon);
			}
			first = false;
		}
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
		if (!isSetCodInst()) {
			throw new org.apache.thrift.protocol.TProtocolException("Required field 'codInst' is unset! Struct:" + toString());
		}

		if (!isSetNmeInst()) {
			throw new org.apache.thrift.protocol.TProtocolException("Required field 'nmeInst' is unset! Struct:" + toString());
		}

		// check for sub-struct validity
	}

	private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
		try {
			read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private static class InstituicaoStandardSchemeFactory implements SchemeFactory {
		public InstituicaoStandardScheme getScheme() {
			return new InstituicaoStandardScheme();
		}
	}

	private static class InstituicaoStandardScheme extends StandardScheme<Instituicao> {

		public void read(org.apache.thrift.protocol.TProtocol iprot, Instituicao struct) throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (schemeField.id) {
				case 1: // COD_INST
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.codInst = iprot.readString();
						struct.setCodInstIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 2: // NME_INST
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.nmeInst = iprot.readString();
						struct.setNmeInstIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 3: // SGL_INST
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.sglInst = iprot.readString();
						struct.setSglInstIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 4: // DSC_ABREV_INST
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.dscAbrevInst = iprot.readString();
						struct.setDscAbrevInstIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 5: // DSC_UF_INST
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.dscUfInst = iprot.readString();
						struct.setDscUfInstIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 6: // DSC_REGIAO_INST
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.dscRegiaoInst = iprot.readString();
						struct.setDscRegiaoInstIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 7: // COD_SETOR_ECON
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.codSetorEcon = iprot.readString();
						struct.setCodSetorEconIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 8: // DSC_SETOR_ECON
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.dscSetorEcon = iprot.readString();
						struct.setDscSetorEconIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				default:
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();
			struct.validate();
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot, Instituicao struct) throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			if (struct.codInst != null) {
				oprot.writeFieldBegin(COD_INST_FIELD_DESC);
				oprot.writeString(struct.codInst);
				oprot.writeFieldEnd();
			}
			if (struct.nmeInst != null) {
				oprot.writeFieldBegin(NME_INST_FIELD_DESC);
				oprot.writeString(struct.nmeInst);
				oprot.writeFieldEnd();
			}
			if (struct.sglInst != null) {
				if (struct.isSetSglInst()) {
					oprot.writeFieldBegin(SGL_INST_FIELD_DESC);
					oprot.writeString(struct.sglInst);
					oprot.writeFieldEnd();
				}
			}
			if (struct.dscAbrevInst != null) {
				if (struct.isSetDscAbrevInst()) {
					oprot.writeFieldBegin(DSC_ABREV_INST_FIELD_DESC);
					oprot.writeString(struct.dscAbrevInst);
					oprot.writeFieldEnd();
				}
			}
			if (struct.dscUfInst != null) {
				if (struct.isSetDscUfInst()) {
					oprot.writeFieldBegin(DSC_UF_INST_FIELD_DESC);
					oprot.writeString(struct.dscUfInst);
					oprot.writeFieldEnd();
				}
			}
			if (struct.dscRegiaoInst != null) {
				if (struct.isSetDscRegiaoInst()) {
					oprot.writeFieldBegin(DSC_REGIAO_INST_FIELD_DESC);
					oprot.writeString(struct.dscRegiaoInst);
					oprot.writeFieldEnd();
				}
			}
			if (struct.codSetorEcon != null) {
				if (struct.isSetCodSetorEcon()) {
					oprot.writeFieldBegin(COD_SETOR_ECON_FIELD_DESC);
					oprot.writeString(struct.codSetorEcon);
					oprot.writeFieldEnd();
				}
			}
			if (struct.dscSetorEcon != null) {
				if (struct.isSetDscSetorEcon()) {
					oprot.writeFieldBegin(DSC_SETOR_ECON_FIELD_DESC);
					oprot.writeString(struct.dscSetorEcon);
					oprot.writeFieldEnd();
				}
			}
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class InstituicaoTupleSchemeFactory implements SchemeFactory {
		public InstituicaoTupleScheme getScheme() {
			return new InstituicaoTupleScheme();
		}
	}

	private static class InstituicaoTupleScheme extends TupleScheme<Instituicao> {

		@Override
		public void write(org.apache.thrift.protocol.TProtocol prot, Instituicao struct) throws org.apache.thrift.TException {
			TTupleProtocol oprot = (TTupleProtocol) prot;
			oprot.writeString(struct.codInst);
			oprot.writeString(struct.nmeInst);
			BitSet optionals = new BitSet();
			if (struct.isSetSglInst()) {
				optionals.set(0);
			}
			if (struct.isSetDscAbrevInst()) {
				optionals.set(1);
			}
			if (struct.isSetDscUfInst()) {
				optionals.set(2);
			}
			if (struct.isSetDscRegiaoInst()) {
				optionals.set(3);
			}
			if (struct.isSetCodSetorEcon()) {
				optionals.set(4);
			}
			if (struct.isSetDscSetorEcon()) {
				optionals.set(5);
			}
			oprot.writeBitSet(optionals, 6);
			if (struct.isSetSglInst()) {
				oprot.writeString(struct.sglInst);
			}
			if (struct.isSetDscAbrevInst()) {
				oprot.writeString(struct.dscAbrevInst);
			}
			if (struct.isSetDscUfInst()) {
				oprot.writeString(struct.dscUfInst);
			}
			if (struct.isSetDscRegiaoInst()) {
				oprot.writeString(struct.dscRegiaoInst);
			}
			if (struct.isSetCodSetorEcon()) {
				oprot.writeString(struct.codSetorEcon);
			}
			if (struct.isSetDscSetorEcon()) {
				oprot.writeString(struct.dscSetorEcon);
			}
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol prot, Instituicao struct) throws org.apache.thrift.TException {
			TTupleProtocol iprot = (TTupleProtocol) prot;
			struct.codInst = iprot.readString();
			struct.setCodInstIsSet(true);
			struct.nmeInst = iprot.readString();
			struct.setNmeInstIsSet(true);
			BitSet incoming = iprot.readBitSet(6);
			if (incoming.get(0)) {
				struct.sglInst = iprot.readString();
				struct.setSglInstIsSet(true);
			}
			if (incoming.get(1)) {
				struct.dscAbrevInst = iprot.readString();
				struct.setDscAbrevInstIsSet(true);
			}
			if (incoming.get(2)) {
				struct.dscUfInst = iprot.readString();
				struct.setDscUfInstIsSet(true);
			}
			if (incoming.get(3)) {
				struct.dscRegiaoInst = iprot.readString();
				struct.setDscRegiaoInstIsSet(true);
			}
			if (incoming.get(4)) {
				struct.codSetorEcon = iprot.readString();
				struct.setCodSetorEconIsSet(true);
			}
			if (incoming.get(5)) {
				struct.dscSetorEcon = iprot.readString();
				struct.setDscSetorEconIsSet(true);
			}
		}
	}

}
