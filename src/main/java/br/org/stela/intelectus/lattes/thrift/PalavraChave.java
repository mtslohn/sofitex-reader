/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package br.org.stela.intelectus.lattes.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-6-9")
public class PalavraChave implements org.apache.thrift.TBase<PalavraChave, PalavraChave._Fields>, java.io.Serializable, Cloneable, Comparable<PalavraChave> {
	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PalavraChave");

	private static final org.apache.thrift.protocol.TField NRO_ID_CNPQ_FIELD_DESC =
			new org.apache.thrift.protocol.TField("nroIdCnpq", org.apache.thrift.protocol.TType.STRING, (short) 1);
	private static final org.apache.thrift.protocol.TField SEQ_PLV_CHAVE_FIELD_DESC =
			new org.apache.thrift.protocol.TField("seqPlvChave", org.apache.thrift.protocol.TType.I64, (short) 2);
	private static final org.apache.thrift.protocol.TField NME_PLV_CHAVE_FIELD_DESC =
			new org.apache.thrift.protocol.TField("nmePlvChave", org.apache.thrift.protocol.TType.STRING, (short) 3);
	private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC =
			new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I32, (short) 4);

	private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

	static {
		schemes.put(StandardScheme.class, new PalavraChaveStandardSchemeFactory());
		schemes.put(TupleScheme.class, new PalavraChaveTupleSchemeFactory());
	}

	private String nroIdCnpq; // required
	private long seqPlvChave; // required
	private String nmePlvChave; // required
	private int count; // optional

	/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {
		NRO_ID_CNPQ((short) 1, "nroIdCnpq"),
		SEQ_PLV_CHAVE((short) 2, "seqPlvChave"),
		NME_PLV_CHAVE((short) 3, "nmePlvChave"),
		COUNT((short) 4, "count");

		private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

		static {
			for (_Fields field : EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not found.
		 */
		public static _Fields findByThriftId(int fieldId) {
			switch (fieldId) {
			case 1: // NRO_ID_CNPQ
				return NRO_ID_CNPQ;
			case 2: // SEQ_PLV_CHAVE
				return SEQ_PLV_CHAVE;
			case 3: // NME_PLV_CHAVE
				return NME_PLV_CHAVE;
			case 4: // COUNT
				return COUNT;
			default:
				return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null)
				throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not found.
		 */
		public static _Fields findByName(String name) {
			return byName.get(name);
		}

		private final short _thriftId;
		private final String _fieldName;

		_Fields(short thriftId, String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public String getFieldName() {
			return _fieldName;
		}
	}

	// isset id assignments
	private static final int __SEQPLVCHAVE_ISSET_ID = 0;
	private static final int __COUNT_ISSET_ID = 1;
	private byte __isset_bitfield = 0;
	private static final _Fields optionals[] = {_Fields.COUNT};
	public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

	static {
		Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
		tmpMap.put(_Fields.NRO_ID_CNPQ, new org.apache.thrift.meta_data.FieldMetaData("nroIdCnpq", org.apache.thrift.TFieldRequirementType.REQUIRED,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.SEQ_PLV_CHAVE, new org.apache.thrift.meta_data.FieldMetaData("seqPlvChave", org.apache.thrift.TFieldRequirementType.REQUIRED,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64, "long")));
		tmpMap.put(_Fields.NME_PLV_CHAVE, new org.apache.thrift.meta_data.FieldMetaData("nmePlvChave", org.apache.thrift.TFieldRequirementType.REQUIRED,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.OPTIONAL,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32, "int")));
		metaDataMap = Collections.unmodifiableMap(tmpMap);
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PalavraChave.class, metaDataMap);
	}

	public PalavraChave() {
	}

	public PalavraChave(String nroIdCnpq, long seqPlvChave, String nmePlvChave) {
		this();
		this.nroIdCnpq = nroIdCnpq;
		this.seqPlvChave = seqPlvChave;
		setSeqPlvChaveIsSet(true);
		this.nmePlvChave = nmePlvChave;
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public PalavraChave(PalavraChave other) {
		__isset_bitfield = other.__isset_bitfield;
		if (other.isSetNroIdCnpq()) {
			this.nroIdCnpq = other.nroIdCnpq;
		}
		this.seqPlvChave = other.seqPlvChave;
		if (other.isSetNmePlvChave()) {
			this.nmePlvChave = other.nmePlvChave;
		}
		this.count = other.count;
	}

	public PalavraChave deepCopy() {
		return new PalavraChave(this);
	}

	@Override
	public void clear() {
		this.nroIdCnpq = null;
		setSeqPlvChaveIsSet(false);
		this.seqPlvChave = 0;
		this.nmePlvChave = null;
		setCountIsSet(false);
		this.count = 0;
	}

	public String getNroIdCnpq() {
		return this.nroIdCnpq;
	}

	public void setNroIdCnpq(String nroIdCnpq) {
		this.nroIdCnpq = nroIdCnpq;
	}

	public void unsetNroIdCnpq() {
		this.nroIdCnpq = null;
	}

	/** Returns true if field nroIdCnpq is set (has been assigned a value) and false otherwise */
	public boolean isSetNroIdCnpq() {
		return this.nroIdCnpq != null;
	}

	public void setNroIdCnpqIsSet(boolean value) {
		if (!value) {
			this.nroIdCnpq = null;
		}
	}

	public long getSeqPlvChave() {
		return this.seqPlvChave;
	}

	public void setSeqPlvChave(long seqPlvChave) {
		this.seqPlvChave = seqPlvChave;
		setSeqPlvChaveIsSet(true);
	}

	public void unsetSeqPlvChave() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SEQPLVCHAVE_ISSET_ID);
	}

	/** Returns true if field seqPlvChave is set (has been assigned a value) and false otherwise */
	public boolean isSetSeqPlvChave() {
		return EncodingUtils.testBit(__isset_bitfield, __SEQPLVCHAVE_ISSET_ID);
	}

	public void setSeqPlvChaveIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SEQPLVCHAVE_ISSET_ID, value);
	}

	public String getNmePlvChave() {
		return this.nmePlvChave;
	}

	public void setNmePlvChave(String nmePlvChave) {
		this.nmePlvChave = nmePlvChave;
	}

	public void unsetNmePlvChave() {
		this.nmePlvChave = null;
	}

	/** Returns true if field nmePlvChave is set (has been assigned a value) and false otherwise */
	public boolean isSetNmePlvChave() {
		return this.nmePlvChave != null;
	}

	public void setNmePlvChaveIsSet(boolean value) {
		if (!value) {
			this.nmePlvChave = null;
		}
	}

	public int getCount() {
		return this.count;
	}

	public void setCount(int count) {
		this.count = count;
		setCountIsSet(true);
	}

	public void unsetCount() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COUNT_ISSET_ID);
	}

	/** Returns true if field count is set (has been assigned a value) and false otherwise */
	public boolean isSetCount() {
		return EncodingUtils.testBit(__isset_bitfield, __COUNT_ISSET_ID);
	}

	public void setCountIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COUNT_ISSET_ID, value);
	}

	public void setFieldValue(_Fields field, Object value) {
		switch (field) {
		case NRO_ID_CNPQ:
			if (value == null) {
				unsetNroIdCnpq();
			} else {
				setNroIdCnpq((String) value);
			}
			break;

		case SEQ_PLV_CHAVE:
			if (value == null) {
				unsetSeqPlvChave();
			} else {
				setSeqPlvChave((Long) value);
			}
			break;

		case NME_PLV_CHAVE:
			if (value == null) {
				unsetNmePlvChave();
			} else {
				setNmePlvChave((String) value);
			}
			break;

		case COUNT:
			if (value == null) {
				unsetCount();
			} else {
				setCount((Integer) value);
			}
			break;

		}
	}

	public Object getFieldValue(_Fields field) {
		switch (field) {
		case NRO_ID_CNPQ:
			return getNroIdCnpq();

		case SEQ_PLV_CHAVE:
			return Long.valueOf(getSeqPlvChave());

		case NME_PLV_CHAVE:
			return getNmePlvChave();

		case COUNT:
			return Integer.valueOf(getCount());

		}
		throw new IllegalStateException();
	}

	/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
	public boolean isSet(_Fields field) {
		if (field == null) {
			throw new IllegalArgumentException();
		}

		switch (field) {
		case NRO_ID_CNPQ:
			return isSetNroIdCnpq();
		case SEQ_PLV_CHAVE:
			return isSetSeqPlvChave();
		case NME_PLV_CHAVE:
			return isSetNmePlvChave();
		case COUNT:
			return isSetCount();
		}
		throw new IllegalStateException();
	}

	@Override
	public boolean equals(Object that) {
		if (that == null)
			return false;
		if (that instanceof PalavraChave)
			return this.equals((PalavraChave) that);
		return false;
	}

	public boolean equals(PalavraChave that) {
		if (that == null)
			return false;

		boolean this_present_nroIdCnpq = true && this.isSetNroIdCnpq();
		boolean that_present_nroIdCnpq = true && that.isSetNroIdCnpq();
		if (this_present_nroIdCnpq || that_present_nroIdCnpq) {
			if (!(this_present_nroIdCnpq && that_present_nroIdCnpq))
				return false;
			if (!this.nroIdCnpq.equals(that.nroIdCnpq))
				return false;
		}

		boolean this_present_seqPlvChave = true;
		boolean that_present_seqPlvChave = true;
		if (this_present_seqPlvChave || that_present_seqPlvChave) {
			if (!(this_present_seqPlvChave && that_present_seqPlvChave))
				return false;
			if (this.seqPlvChave != that.seqPlvChave)
				return false;
		}

		boolean this_present_nmePlvChave = true && this.isSetNmePlvChave();
		boolean that_present_nmePlvChave = true && that.isSetNmePlvChave();
		if (this_present_nmePlvChave || that_present_nmePlvChave) {
			if (!(this_present_nmePlvChave && that_present_nmePlvChave))
				return false;
			if (!this.nmePlvChave.equals(that.nmePlvChave))
				return false;
		}

		boolean this_present_count = true && this.isSetCount();
		boolean that_present_count = true && that.isSetCount();
		if (this_present_count || that_present_count) {
			if (!(this_present_count && that_present_count))
				return false;
			if (this.count != that.count)
				return false;
		}

		return true;
	}

	@Override
	public int hashCode() {
		List<Object> list = new ArrayList<Object>();

		boolean present_nroIdCnpq = true && (isSetNroIdCnpq());
		list.add(present_nroIdCnpq);
		if (present_nroIdCnpq)
			list.add(nroIdCnpq);

		boolean present_seqPlvChave = true;
		list.add(present_seqPlvChave);
		if (present_seqPlvChave)
			list.add(seqPlvChave);

		boolean present_nmePlvChave = true && (isSetNmePlvChave());
		list.add(present_nmePlvChave);
		if (present_nmePlvChave)
			list.add(nmePlvChave);

		boolean present_count = true && (isSetCount());
		list.add(present_count);
		if (present_count)
			list.add(count);

		return list.hashCode();
	}

	@Override
	public int compareTo(PalavraChave other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;

		lastComparison = Boolean.valueOf(isSetNroIdCnpq()).compareTo(other.isSetNroIdCnpq());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetNroIdCnpq()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nroIdCnpq, other.nroIdCnpq);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetSeqPlvChave()).compareTo(other.isSetSeqPlvChave());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetSeqPlvChave()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.seqPlvChave, other.seqPlvChave);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetNmePlvChave()).compareTo(other.isSetNmePlvChave());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetNmePlvChave()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nmePlvChave, other.nmePlvChave);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetCount()).compareTo(other.isSetCount());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetCount()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, other.count);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		return 0;
	}

	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
		schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
		schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder("PalavraChave(");
		boolean first = true;

		sb.append("nroIdCnpq:");
		if (this.nroIdCnpq == null) {
			sb.append("null");
		} else {
			sb.append(this.nroIdCnpq);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("seqPlvChave:");
		sb.append(this.seqPlvChave);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("nmePlvChave:");
		if (this.nmePlvChave == null) {
			sb.append("null");
		} else {
			sb.append(this.nmePlvChave);
		}
		first = false;
		if (isSetCount()) {
			if (!first)
				sb.append(", ");
			sb.append("count:");
			sb.append(this.count);
			first = false;
		}
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
		if (!isSetNroIdCnpq()) {
			throw new org.apache.thrift.protocol.TProtocolException("Required field 'nroIdCnpq' is unset! Struct:" + toString());
		}

		if (!isSetSeqPlvChave()) {
			throw new org.apache.thrift.protocol.TProtocolException("Required field 'seqPlvChave' is unset! Struct:" + toString());
		}

		if (!isSetNmePlvChave()) {
			throw new org.apache.thrift.protocol.TProtocolException("Required field 'nmePlvChave' is unset! Struct:" + toString());
		}

		// check for sub-struct validity
	}

	private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
		try {
			// it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
			__isset_bitfield = 0;
			read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private static class PalavraChaveStandardSchemeFactory implements SchemeFactory {
		public PalavraChaveStandardScheme getScheme() {
			return new PalavraChaveStandardScheme();
		}
	}

	private static class PalavraChaveStandardScheme extends StandardScheme<PalavraChave> {

		public void read(org.apache.thrift.protocol.TProtocol iprot, PalavraChave struct) throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (schemeField.id) {
				case 1: // NRO_ID_CNPQ
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.nroIdCnpq = iprot.readString();
						struct.setNroIdCnpqIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 2: // SEQ_PLV_CHAVE
					if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
						struct.seqPlvChave = iprot.readI64();
						struct.setSeqPlvChaveIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 3: // NME_PLV_CHAVE
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.nmePlvChave = iprot.readString();
						struct.setNmePlvChaveIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 4: // COUNT
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.count = iprot.readI32();
						struct.setCountIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				default:
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();
			struct.validate();
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot, PalavraChave struct) throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			if (struct.nroIdCnpq != null) {
				oprot.writeFieldBegin(NRO_ID_CNPQ_FIELD_DESC);
				oprot.writeString(struct.nroIdCnpq);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldBegin(SEQ_PLV_CHAVE_FIELD_DESC);
			oprot.writeI64(struct.seqPlvChave);
			oprot.writeFieldEnd();
			if (struct.nmePlvChave != null) {
				oprot.writeFieldBegin(NME_PLV_CHAVE_FIELD_DESC);
				oprot.writeString(struct.nmePlvChave);
				oprot.writeFieldEnd();
			}
			if (struct.isSetCount()) {
				oprot.writeFieldBegin(COUNT_FIELD_DESC);
				oprot.writeI32(struct.count);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class PalavraChaveTupleSchemeFactory implements SchemeFactory {
		public PalavraChaveTupleScheme getScheme() {
			return new PalavraChaveTupleScheme();
		}
	}

	private static class PalavraChaveTupleScheme extends TupleScheme<PalavraChave> {

		@Override
		public void write(org.apache.thrift.protocol.TProtocol prot, PalavraChave struct) throws org.apache.thrift.TException {
			TTupleProtocol oprot = (TTupleProtocol) prot;
			oprot.writeString(struct.nroIdCnpq);
			oprot.writeI64(struct.seqPlvChave);
			oprot.writeString(struct.nmePlvChave);
			BitSet optionals = new BitSet();
			if (struct.isSetCount()) {
				optionals.set(0);
			}
			oprot.writeBitSet(optionals, 1);
			if (struct.isSetCount()) {
				oprot.writeI32(struct.count);
			}
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol prot, PalavraChave struct) throws org.apache.thrift.TException {
			TTupleProtocol iprot = (TTupleProtocol) prot;
			struct.nroIdCnpq = iprot.readString();
			struct.setNroIdCnpqIsSet(true);
			struct.seqPlvChave = iprot.readI64();
			struct.setSeqPlvChaveIsSet(true);
			struct.nmePlvChave = iprot.readString();
			struct.setNmePlvChaveIsSet(true);
			BitSet incoming = iprot.readBitSet(1);
			if (incoming.get(0)) {
				struct.count = iprot.readI32();
				struct.setCountIsSet(true);
			}
		}
	}

}
