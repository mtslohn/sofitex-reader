/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package br.org.stela.intelectus.lattes.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-6-9")
public class NaturezaProjeto
		implements org.apache.thrift.TBase<NaturezaProjeto, NaturezaProjeto._Fields>, java.io.Serializable, Cloneable, Comparable<NaturezaProjeto> {
	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("NaturezaProjeto");

	private static final org.apache.thrift.protocol.TField NRO_ID_CNPQ_FIELD_DESC =
			new org.apache.thrift.protocol.TField("nroIdCnpq", org.apache.thrift.protocol.TType.STRING, (short) 1);
	private static final org.apache.thrift.protocol.TField TPO_NATUREZA_FIELD_DESC =
			new org.apache.thrift.protocol.TField("tpoNatureza", org.apache.thrift.protocol.TType.STRING, (short) 2);

	private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

	static {
		schemes.put(StandardScheme.class, new NaturezaProjetoStandardSchemeFactory());
		schemes.put(TupleScheme.class, new NaturezaProjetoTupleSchemeFactory());
	}

	private String nroIdCnpq; // required
	private String tpoNatureza; // required

	/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {
		NRO_ID_CNPQ((short) 1, "nroIdCnpq"),
		TPO_NATUREZA((short) 2, "tpoNatureza");

		private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

		static {
			for (_Fields field : EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not found.
		 */
		public static _Fields findByThriftId(int fieldId) {
			switch (fieldId) {
			case 1: // NRO_ID_CNPQ
				return NRO_ID_CNPQ;
			case 2: // TPO_NATUREZA
				return TPO_NATUREZA;
			default:
				return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null)
				throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not found.
		 */
		public static _Fields findByName(String name) {
			return byName.get(name);
		}

		private final short _thriftId;
		private final String _fieldName;

		_Fields(short thriftId, String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public String getFieldName() {
			return _fieldName;
		}
	}

	// isset id assignments
	public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

	static {
		Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
		tmpMap.put(_Fields.NRO_ID_CNPQ, new org.apache.thrift.meta_data.FieldMetaData("nroIdCnpq", org.apache.thrift.TFieldRequirementType.REQUIRED,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.TPO_NATUREZA, new org.apache.thrift.meta_data.FieldMetaData("tpoNatureza", org.apache.thrift.TFieldRequirementType.REQUIRED,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		metaDataMap = Collections.unmodifiableMap(tmpMap);
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(NaturezaProjeto.class, metaDataMap);
	}

	public NaturezaProjeto() {
	}

	public NaturezaProjeto(String nroIdCnpq, String tpoNatureza) {
		this();
		this.nroIdCnpq = nroIdCnpq;
		this.tpoNatureza = tpoNatureza;
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public NaturezaProjeto(NaturezaProjeto other) {
		if (other.isSetNroIdCnpq()) {
			this.nroIdCnpq = other.nroIdCnpq;
		}
		if (other.isSetTpoNatureza()) {
			this.tpoNatureza = other.tpoNatureza;
		}
	}

	public NaturezaProjeto deepCopy() {
		return new NaturezaProjeto(this);
	}

	@Override
	public void clear() {
		this.nroIdCnpq = null;
		this.tpoNatureza = null;
	}

	public String getNroIdCnpq() {
		return this.nroIdCnpq;
	}

	public void setNroIdCnpq(String nroIdCnpq) {
		this.nroIdCnpq = nroIdCnpq;
	}

	public void unsetNroIdCnpq() {
		this.nroIdCnpq = null;
	}

	/** Returns true if field nroIdCnpq is set (has been assigned a value) and false otherwise */
	public boolean isSetNroIdCnpq() {
		return this.nroIdCnpq != null;
	}

	public void setNroIdCnpqIsSet(boolean value) {
		if (!value) {
			this.nroIdCnpq = null;
		}
	}

	public String getTpoNatureza() {
		return this.tpoNatureza;
	}

	public void setTpoNatureza(String tpoNatureza) {
		this.tpoNatureza = tpoNatureza;
	}

	public void unsetTpoNatureza() {
		this.tpoNatureza = null;
	}

	/** Returns true if field tpoNatureza is set (has been assigned a value) and false otherwise */
	public boolean isSetTpoNatureza() {
		return this.tpoNatureza != null;
	}

	public void setTpoNaturezaIsSet(boolean value) {
		if (!value) {
			this.tpoNatureza = null;
		}
	}

	public void setFieldValue(_Fields field, Object value) {
		switch (field) {
		case NRO_ID_CNPQ:
			if (value == null) {
				unsetNroIdCnpq();
			} else {
				setNroIdCnpq((String) value);
			}
			break;

		case TPO_NATUREZA:
			if (value == null) {
				unsetTpoNatureza();
			} else {
				setTpoNatureza((String) value);
			}
			break;

		}
	}

	public Object getFieldValue(_Fields field) {
		switch (field) {
		case NRO_ID_CNPQ:
			return getNroIdCnpq();

		case TPO_NATUREZA:
			return getTpoNatureza();

		}
		throw new IllegalStateException();
	}

	/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
	public boolean isSet(_Fields field) {
		if (field == null) {
			throw new IllegalArgumentException();
		}

		switch (field) {
		case NRO_ID_CNPQ:
			return isSetNroIdCnpq();
		case TPO_NATUREZA:
			return isSetTpoNatureza();
		}
		throw new IllegalStateException();
	}

	@Override
	public boolean equals(Object that) {
		if (that == null)
			return false;
		if (that instanceof NaturezaProjeto)
			return this.equals((NaturezaProjeto) that);
		return false;
	}

	public boolean equals(NaturezaProjeto that) {
		if (that == null)
			return false;

		boolean this_present_nroIdCnpq = true && this.isSetNroIdCnpq();
		boolean that_present_nroIdCnpq = true && that.isSetNroIdCnpq();
		if (this_present_nroIdCnpq || that_present_nroIdCnpq) {
			if (!(this_present_nroIdCnpq && that_present_nroIdCnpq))
				return false;
			if (!this.nroIdCnpq.equals(that.nroIdCnpq))
				return false;
		}

		boolean this_present_tpoNatureza = true && this.isSetTpoNatureza();
		boolean that_present_tpoNatureza = true && that.isSetTpoNatureza();
		if (this_present_tpoNatureza || that_present_tpoNatureza) {
			if (!(this_present_tpoNatureza && that_present_tpoNatureza))
				return false;
			if (!this.tpoNatureza.equals(that.tpoNatureza))
				return false;
		}

		return true;
	}

	@Override
	public int hashCode() {
		List<Object> list = new ArrayList<Object>();

		boolean present_nroIdCnpq = true && (isSetNroIdCnpq());
		list.add(present_nroIdCnpq);
		if (present_nroIdCnpq)
			list.add(nroIdCnpq);

		boolean present_tpoNatureza = true && (isSetTpoNatureza());
		list.add(present_tpoNatureza);
		if (present_tpoNatureza)
			list.add(tpoNatureza);

		return list.hashCode();
	}

	@Override
	public int compareTo(NaturezaProjeto other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;

		lastComparison = Boolean.valueOf(isSetNroIdCnpq()).compareTo(other.isSetNroIdCnpq());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetNroIdCnpq()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nroIdCnpq, other.nroIdCnpq);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetTpoNatureza()).compareTo(other.isSetTpoNatureza());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetTpoNatureza()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tpoNatureza, other.tpoNatureza);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		return 0;
	}

	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
		schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
		schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder("NaturezaProjeto(");
		boolean first = true;

		sb.append("nroIdCnpq:");
		if (this.nroIdCnpq == null) {
			sb.append("null");
		} else {
			sb.append(this.nroIdCnpq);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("tpoNatureza:");
		if (this.tpoNatureza == null) {
			sb.append("null");
		} else {
			sb.append(this.tpoNatureza);
		}
		first = false;
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
		if (!isSetNroIdCnpq()) {
			throw new org.apache.thrift.protocol.TProtocolException("Required field 'nroIdCnpq' is unset! Struct:" + toString());
		}

		if (!isSetTpoNatureza()) {
			throw new org.apache.thrift.protocol.TProtocolException("Required field 'tpoNatureza' is unset! Struct:" + toString());
		}

		// check for sub-struct validity
	}

	private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
		try {
			read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private static class NaturezaProjetoStandardSchemeFactory implements SchemeFactory {
		public NaturezaProjetoStandardScheme getScheme() {
			return new NaturezaProjetoStandardScheme();
		}
	}

	private static class NaturezaProjetoStandardScheme extends StandardScheme<NaturezaProjeto> {

		public void read(org.apache.thrift.protocol.TProtocol iprot, NaturezaProjeto struct) throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (schemeField.id) {
				case 1: // NRO_ID_CNPQ
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.nroIdCnpq = iprot.readString();
						struct.setNroIdCnpqIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 2: // TPO_NATUREZA
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.tpoNatureza = iprot.readString();
						struct.setTpoNaturezaIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				default:
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();
			struct.validate();
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot, NaturezaProjeto struct) throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			if (struct.nroIdCnpq != null) {
				oprot.writeFieldBegin(NRO_ID_CNPQ_FIELD_DESC);
				oprot.writeString(struct.nroIdCnpq);
				oprot.writeFieldEnd();
			}
			if (struct.tpoNatureza != null) {
				oprot.writeFieldBegin(TPO_NATUREZA_FIELD_DESC);
				oprot.writeString(struct.tpoNatureza);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class NaturezaProjetoTupleSchemeFactory implements SchemeFactory {
		public NaturezaProjetoTupleScheme getScheme() {
			return new NaturezaProjetoTupleScheme();
		}
	}

	private static class NaturezaProjetoTupleScheme extends TupleScheme<NaturezaProjeto> {

		@Override
		public void write(org.apache.thrift.protocol.TProtocol prot, NaturezaProjeto struct) throws org.apache.thrift.TException {
			TTupleProtocol oprot = (TTupleProtocol) prot;
			oprot.writeString(struct.nroIdCnpq);
			oprot.writeString(struct.tpoNatureza);
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol prot, NaturezaProjeto struct) throws org.apache.thrift.TException {
			TTupleProtocol iprot = (TTupleProtocol) prot;
			struct.nroIdCnpq = iprot.readString();
			struct.setNroIdCnpqIsSet(true);
			struct.tpoNatureza = iprot.readString();
			struct.setTpoNaturezaIsSet(true);
		}
	}

}
