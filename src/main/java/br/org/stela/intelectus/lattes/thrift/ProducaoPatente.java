/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package br.org.stela.intelectus.lattes.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-6-9")
public class ProducaoPatente
		implements org.apache.thrift.TBase<ProducaoPatente, ProducaoPatente._Fields>, java.io.Serializable, Cloneable, Comparable<ProducaoPatente> {
	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ProducaoPatente");

	private static final org.apache.thrift.protocol.TField NRO_ID_CNPQ_FIELD_DESC =
			new org.apache.thrift.protocol.TField("nroIdCnpq", org.apache.thrift.protocol.TType.STRING, (short) 1);
	private static final org.apache.thrift.protocol.TField SEQ_PRODUCAO_FIELD_DESC =
			new org.apache.thrift.protocol.TField("seqProducao", org.apache.thrift.protocol.TType.I64, (short) 2);
	private static final org.apache.thrift.protocol.TField SEQ_PATENTE_FIELD_DESC =
			new org.apache.thrift.protocol.TField("seqPatente", org.apache.thrift.protocol.TType.I64, (short) 3);
	private static final org.apache.thrift.protocol.TField COD_REGISTRO_FIELD_DESC =
			new org.apache.thrift.protocol.TField("codRegistro", org.apache.thrift.protocol.TType.STRING, (short) 4);
	private static final org.apache.thrift.protocol.TField TPO_PATENTE_FIELD_DESC =
			new org.apache.thrift.protocol.TField("tpoPatente", org.apache.thrift.protocol.TType.STRING, (short) 5);
	private static final org.apache.thrift.protocol.TField TIT_REGISTRO_FIELD_DESC =
			new org.apache.thrift.protocol.TField("titRegistro", org.apache.thrift.protocol.TType.STRING, (short) 6);
	private static final org.apache.thrift.protocol.TField DTA_PEDIDO_DEPOSITO_FIELD_DESC =
			new org.apache.thrift.protocol.TField("dtaPedidoDeposito", org.apache.thrift.protocol.TType.I64, (short) 7);
	private static final org.apache.thrift.protocol.TField DTA_CONCESSAO_FIELD_DESC =
			new org.apache.thrift.protocol.TField("dtaConcessao", org.apache.thrift.protocol.TType.I64, (short) 8);
	private static final org.apache.thrift.protocol.TField NME_INST_DEPOSITO_REGISTRO_FIELD_DESC =
			new org.apache.thrift.protocol.TField("nmeInstDepositoRegistro", org.apache.thrift.protocol.TType.STRING, (short) 9);
	private static final org.apache.thrift.protocol.TField NME_INSTITUICAO_DEPOSITARIA_FIELD_DESC =
			new org.apache.thrift.protocol.TField("nmeInstituicaoDepositaria", org.apache.thrift.protocol.TType.STRING, (short) 10);

	private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

	static {
		schemes.put(StandardScheme.class, new ProducaoPatenteStandardSchemeFactory());
		schemes.put(TupleScheme.class, new ProducaoPatenteTupleSchemeFactory());
	}

	private String nroIdCnpq; // required
	private long seqProducao; // required
	private long seqPatente; // required
	private String codRegistro; // optional
	private String tpoPatente; // optional
	private String titRegistro; // optional
	private long dtaPedidoDeposito; // optional
	private long dtaConcessao; // optional
	private String nmeInstDepositoRegistro; // optional
	private String nmeInstituicaoDepositaria; // optional

	/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {
		NRO_ID_CNPQ((short) 1, "nroIdCnpq"),
		SEQ_PRODUCAO((short) 2, "seqProducao"),
		SEQ_PATENTE((short) 3, "seqPatente"),
		COD_REGISTRO((short) 4, "codRegistro"),
		TPO_PATENTE((short) 5, "tpoPatente"),
		TIT_REGISTRO((short) 6, "titRegistro"),
		DTA_PEDIDO_DEPOSITO((short) 7, "dtaPedidoDeposito"),
		DTA_CONCESSAO((short) 8, "dtaConcessao"),
		NME_INST_DEPOSITO_REGISTRO((short) 9, "nmeInstDepositoRegistro"),
		NME_INSTITUICAO_DEPOSITARIA((short) 10, "nmeInstituicaoDepositaria");

		private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

		static {
			for (_Fields field : EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not found.
		 */
		public static _Fields findByThriftId(int fieldId) {
			switch (fieldId) {
			case 1: // NRO_ID_CNPQ
				return NRO_ID_CNPQ;
			case 2: // SEQ_PRODUCAO
				return SEQ_PRODUCAO;
			case 3: // SEQ_PATENTE
				return SEQ_PATENTE;
			case 4: // COD_REGISTRO
				return COD_REGISTRO;
			case 5: // TPO_PATENTE
				return TPO_PATENTE;
			case 6: // TIT_REGISTRO
				return TIT_REGISTRO;
			case 7: // DTA_PEDIDO_DEPOSITO
				return DTA_PEDIDO_DEPOSITO;
			case 8: // DTA_CONCESSAO
				return DTA_CONCESSAO;
			case 9: // NME_INST_DEPOSITO_REGISTRO
				return NME_INST_DEPOSITO_REGISTRO;
			case 10: // NME_INSTITUICAO_DEPOSITARIA
				return NME_INSTITUICAO_DEPOSITARIA;
			default:
				return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null)
				throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not found.
		 */
		public static _Fields findByName(String name) {
			return byName.get(name);
		}

		private final short _thriftId;
		private final String _fieldName;

		_Fields(short thriftId, String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public String getFieldName() {
			return _fieldName;
		}
	}

	// isset id assignments
	private static final int __SEQPRODUCAO_ISSET_ID = 0;
	private static final int __SEQPATENTE_ISSET_ID = 1;
	private static final int __DTAPEDIDODEPOSITO_ISSET_ID = 2;
	private static final int __DTACONCESSAO_ISSET_ID = 3;
	private byte __isset_bitfield = 0;
	private static final _Fields optionals[] = {_Fields.COD_REGISTRO, _Fields.TPO_PATENTE, _Fields.TIT_REGISTRO, _Fields.DTA_PEDIDO_DEPOSITO,
			_Fields.DTA_CONCESSAO, _Fields.NME_INST_DEPOSITO_REGISTRO, _Fields.NME_INSTITUICAO_DEPOSITARIA};
	public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

	static {
		Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
		tmpMap.put(_Fields.NRO_ID_CNPQ, new org.apache.thrift.meta_data.FieldMetaData("nroIdCnpq", org.apache.thrift.TFieldRequirementType.REQUIRED,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.SEQ_PRODUCAO, new org.apache.thrift.meta_data.FieldMetaData("seqProducao", org.apache.thrift.TFieldRequirementType.REQUIRED,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64, "long")));
		tmpMap.put(_Fields.SEQ_PATENTE, new org.apache.thrift.meta_data.FieldMetaData("seqPatente", org.apache.thrift.TFieldRequirementType.REQUIRED,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64, "long")));
		tmpMap.put(_Fields.COD_REGISTRO, new org.apache.thrift.meta_data.FieldMetaData("codRegistro", org.apache.thrift.TFieldRequirementType.OPTIONAL,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.TPO_PATENTE, new org.apache.thrift.meta_data.FieldMetaData("tpoPatente", org.apache.thrift.TFieldRequirementType.OPTIONAL,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.TIT_REGISTRO, new org.apache.thrift.meta_data.FieldMetaData("titRegistro", org.apache.thrift.TFieldRequirementType.OPTIONAL,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.DTA_PEDIDO_DEPOSITO,
				new org.apache.thrift.meta_data.FieldMetaData("dtaPedidoDeposito", org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64, "date")));
		tmpMap.put(_Fields.DTA_CONCESSAO, new org.apache.thrift.meta_data.FieldMetaData("dtaConcessao", org.apache.thrift.TFieldRequirementType.OPTIONAL,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64, "date")));
		tmpMap.put(_Fields.NME_INST_DEPOSITO_REGISTRO, new org.apache.thrift.meta_data.FieldMetaData("nmeInstDepositoRegistro",
				org.apache.thrift.TFieldRequirementType.OPTIONAL, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.NME_INSTITUICAO_DEPOSITARIA, new org.apache.thrift.meta_data.FieldMetaData("nmeInstituicaoDepositaria",
				org.apache.thrift.TFieldRequirementType.OPTIONAL, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		metaDataMap = Collections.unmodifiableMap(tmpMap);
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ProducaoPatente.class, metaDataMap);
	}

	public ProducaoPatente() {
	}

	public ProducaoPatente(String nroIdCnpq, long seqProducao, long seqPatente) {
		this();
		this.nroIdCnpq = nroIdCnpq;
		this.seqProducao = seqProducao;
		setSeqProducaoIsSet(true);
		this.seqPatente = seqPatente;
		setSeqPatenteIsSet(true);
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public ProducaoPatente(ProducaoPatente other) {
		__isset_bitfield = other.__isset_bitfield;
		if (other.isSetNroIdCnpq()) {
			this.nroIdCnpq = other.nroIdCnpq;
		}
		this.seqProducao = other.seqProducao;
		this.seqPatente = other.seqPatente;
		if (other.isSetCodRegistro()) {
			this.codRegistro = other.codRegistro;
		}
		if (other.isSetTpoPatente()) {
			this.tpoPatente = other.tpoPatente;
		}
		if (other.isSetTitRegistro()) {
			this.titRegistro = other.titRegistro;
		}
		this.dtaPedidoDeposito = other.dtaPedidoDeposito;
		this.dtaConcessao = other.dtaConcessao;
		if (other.isSetNmeInstDepositoRegistro()) {
			this.nmeInstDepositoRegistro = other.nmeInstDepositoRegistro;
		}
		if (other.isSetNmeInstituicaoDepositaria()) {
			this.nmeInstituicaoDepositaria = other.nmeInstituicaoDepositaria;
		}
	}

	public ProducaoPatente deepCopy() {
		return new ProducaoPatente(this);
	}

	@Override
	public void clear() {
		this.nroIdCnpq = null;
		setSeqProducaoIsSet(false);
		this.seqProducao = 0;
		setSeqPatenteIsSet(false);
		this.seqPatente = 0;
		this.codRegistro = null;
		this.tpoPatente = null;
		this.titRegistro = null;
		setDtaPedidoDepositoIsSet(false);
		this.dtaPedidoDeposito = 0;
		setDtaConcessaoIsSet(false);
		this.dtaConcessao = 0;
		this.nmeInstDepositoRegistro = null;
		this.nmeInstituicaoDepositaria = null;
	}

	public String getNroIdCnpq() {
		return this.nroIdCnpq;
	}

	public void setNroIdCnpq(String nroIdCnpq) {
		this.nroIdCnpq = nroIdCnpq;
	}

	public void unsetNroIdCnpq() {
		this.nroIdCnpq = null;
	}

	/** Returns true if field nroIdCnpq is set (has been assigned a value) and false otherwise */
	public boolean isSetNroIdCnpq() {
		return this.nroIdCnpq != null;
	}

	public void setNroIdCnpqIsSet(boolean value) {
		if (!value) {
			this.nroIdCnpq = null;
		}
	}

	public long getSeqProducao() {
		return this.seqProducao;
	}

	public void setSeqProducao(long seqProducao) {
		this.seqProducao = seqProducao;
		setSeqProducaoIsSet(true);
	}

	public void unsetSeqProducao() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SEQPRODUCAO_ISSET_ID);
	}

	/** Returns true if field seqProducao is set (has been assigned a value) and false otherwise */
	public boolean isSetSeqProducao() {
		return EncodingUtils.testBit(__isset_bitfield, __SEQPRODUCAO_ISSET_ID);
	}

	public void setSeqProducaoIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SEQPRODUCAO_ISSET_ID, value);
	}

	public long getSeqPatente() {
		return this.seqPatente;
	}

	public void setSeqPatente(long seqPatente) {
		this.seqPatente = seqPatente;
		setSeqPatenteIsSet(true);
	}

	public void unsetSeqPatente() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SEQPATENTE_ISSET_ID);
	}

	/** Returns true if field seqPatente is set (has been assigned a value) and false otherwise */
	public boolean isSetSeqPatente() {
		return EncodingUtils.testBit(__isset_bitfield, __SEQPATENTE_ISSET_ID);
	}

	public void setSeqPatenteIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SEQPATENTE_ISSET_ID, value);
	}

	public String getCodRegistro() {
		return this.codRegistro;
	}

	public void setCodRegistro(String codRegistro) {
		this.codRegistro = codRegistro;
	}

	public void unsetCodRegistro() {
		this.codRegistro = null;
	}

	/** Returns true if field codRegistro is set (has been assigned a value) and false otherwise */
	public boolean isSetCodRegistro() {
		return this.codRegistro != null;
	}

	public void setCodRegistroIsSet(boolean value) {
		if (!value) {
			this.codRegistro = null;
		}
	}

	public String getTpoPatente() {
		return this.tpoPatente;
	}

	public void setTpoPatente(String tpoPatente) {
		this.tpoPatente = tpoPatente;
	}

	public void unsetTpoPatente() {
		this.tpoPatente = null;
	}

	/** Returns true if field tpoPatente is set (has been assigned a value) and false otherwise */
	public boolean isSetTpoPatente() {
		return this.tpoPatente != null;
	}

	public void setTpoPatenteIsSet(boolean value) {
		if (!value) {
			this.tpoPatente = null;
		}
	}

	public String getTitRegistro() {
		return this.titRegistro;
	}

	public void setTitRegistro(String titRegistro) {
		this.titRegistro = titRegistro;
	}

	public void unsetTitRegistro() {
		this.titRegistro = null;
	}

	/** Returns true if field titRegistro is set (has been assigned a value) and false otherwise */
	public boolean isSetTitRegistro() {
		return this.titRegistro != null;
	}

	public void setTitRegistroIsSet(boolean value) {
		if (!value) {
			this.titRegistro = null;
		}
	}

	public long getDtaPedidoDeposito() {
		return this.dtaPedidoDeposito;
	}

	public void setDtaPedidoDeposito(long dtaPedidoDeposito) {
		this.dtaPedidoDeposito = dtaPedidoDeposito;
		setDtaPedidoDepositoIsSet(true);
	}

	public void unsetDtaPedidoDeposito() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DTAPEDIDODEPOSITO_ISSET_ID);
	}

	/** Returns true if field dtaPedidoDeposito is set (has been assigned a value) and false otherwise */
	public boolean isSetDtaPedidoDeposito() {
		return EncodingUtils.testBit(__isset_bitfield, __DTAPEDIDODEPOSITO_ISSET_ID);
	}

	public void setDtaPedidoDepositoIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DTAPEDIDODEPOSITO_ISSET_ID, value);
	}

	public long getDtaConcessao() {
		return this.dtaConcessao;
	}

	public void setDtaConcessao(long dtaConcessao) {
		this.dtaConcessao = dtaConcessao;
		setDtaConcessaoIsSet(true);
	}

	public void unsetDtaConcessao() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DTACONCESSAO_ISSET_ID);
	}

	/** Returns true if field dtaConcessao is set (has been assigned a value) and false otherwise */
	public boolean isSetDtaConcessao() {
		return EncodingUtils.testBit(__isset_bitfield, __DTACONCESSAO_ISSET_ID);
	}

	public void setDtaConcessaoIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DTACONCESSAO_ISSET_ID, value);
	}

	public String getNmeInstDepositoRegistro() {
		return this.nmeInstDepositoRegistro;
	}

	public void setNmeInstDepositoRegistro(String nmeInstDepositoRegistro) {
		this.nmeInstDepositoRegistro = nmeInstDepositoRegistro;
	}

	public void unsetNmeInstDepositoRegistro() {
		this.nmeInstDepositoRegistro = null;
	}

	/** Returns true if field nmeInstDepositoRegistro is set (has been assigned a value) and false otherwise */
	public boolean isSetNmeInstDepositoRegistro() {
		return this.nmeInstDepositoRegistro != null;
	}

	public void setNmeInstDepositoRegistroIsSet(boolean value) {
		if (!value) {
			this.nmeInstDepositoRegistro = null;
		}
	}

	public String getNmeInstituicaoDepositaria() {
		return this.nmeInstituicaoDepositaria;
	}

	public void setNmeInstituicaoDepositaria(String nmeInstituicaoDepositaria) {
		this.nmeInstituicaoDepositaria = nmeInstituicaoDepositaria;
	}

	public void unsetNmeInstituicaoDepositaria() {
		this.nmeInstituicaoDepositaria = null;
	}

	/** Returns true if field nmeInstituicaoDepositaria is set (has been assigned a value) and false otherwise */
	public boolean isSetNmeInstituicaoDepositaria() {
		return this.nmeInstituicaoDepositaria != null;
	}

	public void setNmeInstituicaoDepositariaIsSet(boolean value) {
		if (!value) {
			this.nmeInstituicaoDepositaria = null;
		}
	}

	public void setFieldValue(_Fields field, Object value) {
		switch (field) {
		case NRO_ID_CNPQ:
			if (value == null) {
				unsetNroIdCnpq();
			} else {
				setNroIdCnpq((String) value);
			}
			break;

		case SEQ_PRODUCAO:
			if (value == null) {
				unsetSeqProducao();
			} else {
				setSeqProducao((Long) value);
			}
			break;

		case SEQ_PATENTE:
			if (value == null) {
				unsetSeqPatente();
			} else {
				setSeqPatente((Long) value);
			}
			break;

		case COD_REGISTRO:
			if (value == null) {
				unsetCodRegistro();
			} else {
				setCodRegistro((String) value);
			}
			break;

		case TPO_PATENTE:
			if (value == null) {
				unsetTpoPatente();
			} else {
				setTpoPatente((String) value);
			}
			break;

		case TIT_REGISTRO:
			if (value == null) {
				unsetTitRegistro();
			} else {
				setTitRegistro((String) value);
			}
			break;

		case DTA_PEDIDO_DEPOSITO:
			if (value == null) {
				unsetDtaPedidoDeposito();
			} else {
				setDtaPedidoDeposito((Long) value);
			}
			break;

		case DTA_CONCESSAO:
			if (value == null) {
				unsetDtaConcessao();
			} else {
				setDtaConcessao((Long) value);
			}
			break;

		case NME_INST_DEPOSITO_REGISTRO:
			if (value == null) {
				unsetNmeInstDepositoRegistro();
			} else {
				setNmeInstDepositoRegistro((String) value);
			}
			break;

		case NME_INSTITUICAO_DEPOSITARIA:
			if (value == null) {
				unsetNmeInstituicaoDepositaria();
			} else {
				setNmeInstituicaoDepositaria((String) value);
			}
			break;

		}
	}

	public Object getFieldValue(_Fields field) {
		switch (field) {
		case NRO_ID_CNPQ:
			return getNroIdCnpq();

		case SEQ_PRODUCAO:
			return Long.valueOf(getSeqProducao());

		case SEQ_PATENTE:
			return Long.valueOf(getSeqPatente());

		case COD_REGISTRO:
			return getCodRegistro();

		case TPO_PATENTE:
			return getTpoPatente();

		case TIT_REGISTRO:
			return getTitRegistro();

		case DTA_PEDIDO_DEPOSITO:
			return Long.valueOf(getDtaPedidoDeposito());

		case DTA_CONCESSAO:
			return Long.valueOf(getDtaConcessao());

		case NME_INST_DEPOSITO_REGISTRO:
			return getNmeInstDepositoRegistro();

		case NME_INSTITUICAO_DEPOSITARIA:
			return getNmeInstituicaoDepositaria();

		}
		throw new IllegalStateException();
	}

	/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
	public boolean isSet(_Fields field) {
		if (field == null) {
			throw new IllegalArgumentException();
		}

		switch (field) {
		case NRO_ID_CNPQ:
			return isSetNroIdCnpq();
		case SEQ_PRODUCAO:
			return isSetSeqProducao();
		case SEQ_PATENTE:
			return isSetSeqPatente();
		case COD_REGISTRO:
			return isSetCodRegistro();
		case TPO_PATENTE:
			return isSetTpoPatente();
		case TIT_REGISTRO:
			return isSetTitRegistro();
		case DTA_PEDIDO_DEPOSITO:
			return isSetDtaPedidoDeposito();
		case DTA_CONCESSAO:
			return isSetDtaConcessao();
		case NME_INST_DEPOSITO_REGISTRO:
			return isSetNmeInstDepositoRegistro();
		case NME_INSTITUICAO_DEPOSITARIA:
			return isSetNmeInstituicaoDepositaria();
		}
		throw new IllegalStateException();
	}

	@Override
	public boolean equals(Object that) {
		if (that == null)
			return false;
		if (that instanceof ProducaoPatente)
			return this.equals((ProducaoPatente) that);
		return false;
	}

	public boolean equals(ProducaoPatente that) {
		if (that == null)
			return false;

		boolean this_present_nroIdCnpq = true && this.isSetNroIdCnpq();
		boolean that_present_nroIdCnpq = true && that.isSetNroIdCnpq();
		if (this_present_nroIdCnpq || that_present_nroIdCnpq) {
			if (!(this_present_nroIdCnpq && that_present_nroIdCnpq))
				return false;
			if (!this.nroIdCnpq.equals(that.nroIdCnpq))
				return false;
		}

		boolean this_present_seqProducao = true;
		boolean that_present_seqProducao = true;
		if (this_present_seqProducao || that_present_seqProducao) {
			if (!(this_present_seqProducao && that_present_seqProducao))
				return false;
			if (this.seqProducao != that.seqProducao)
				return false;
		}

		boolean this_present_seqPatente = true;
		boolean that_present_seqPatente = true;
		if (this_present_seqPatente || that_present_seqPatente) {
			if (!(this_present_seqPatente && that_present_seqPatente))
				return false;
			if (this.seqPatente != that.seqPatente)
				return false;
		}

		boolean this_present_codRegistro = true && this.isSetCodRegistro();
		boolean that_present_codRegistro = true && that.isSetCodRegistro();
		if (this_present_codRegistro || that_present_codRegistro) {
			if (!(this_present_codRegistro && that_present_codRegistro))
				return false;
			if (!this.codRegistro.equals(that.codRegistro))
				return false;
		}

		boolean this_present_tpoPatente = true && this.isSetTpoPatente();
		boolean that_present_tpoPatente = true && that.isSetTpoPatente();
		if (this_present_tpoPatente || that_present_tpoPatente) {
			if (!(this_present_tpoPatente && that_present_tpoPatente))
				return false;
			if (!this.tpoPatente.equals(that.tpoPatente))
				return false;
		}

		boolean this_present_titRegistro = true && this.isSetTitRegistro();
		boolean that_present_titRegistro = true && that.isSetTitRegistro();
		if (this_present_titRegistro || that_present_titRegistro) {
			if (!(this_present_titRegistro && that_present_titRegistro))
				return false;
			if (!this.titRegistro.equals(that.titRegistro))
				return false;
		}

		boolean this_present_dtaPedidoDeposito = true && this.isSetDtaPedidoDeposito();
		boolean that_present_dtaPedidoDeposito = true && that.isSetDtaPedidoDeposito();
		if (this_present_dtaPedidoDeposito || that_present_dtaPedidoDeposito) {
			if (!(this_present_dtaPedidoDeposito && that_present_dtaPedidoDeposito))
				return false;
			if (this.dtaPedidoDeposito != that.dtaPedidoDeposito)
				return false;
		}

		boolean this_present_dtaConcessao = true && this.isSetDtaConcessao();
		boolean that_present_dtaConcessao = true && that.isSetDtaConcessao();
		if (this_present_dtaConcessao || that_present_dtaConcessao) {
			if (!(this_present_dtaConcessao && that_present_dtaConcessao))
				return false;
			if (this.dtaConcessao != that.dtaConcessao)
				return false;
		}

		boolean this_present_nmeInstDepositoRegistro = true && this.isSetNmeInstDepositoRegistro();
		boolean that_present_nmeInstDepositoRegistro = true && that.isSetNmeInstDepositoRegistro();
		if (this_present_nmeInstDepositoRegistro || that_present_nmeInstDepositoRegistro) {
			if (!(this_present_nmeInstDepositoRegistro && that_present_nmeInstDepositoRegistro))
				return false;
			if (!this.nmeInstDepositoRegistro.equals(that.nmeInstDepositoRegistro))
				return false;
		}

		boolean this_present_nmeInstituicaoDepositaria = true && this.isSetNmeInstituicaoDepositaria();
		boolean that_present_nmeInstituicaoDepositaria = true && that.isSetNmeInstituicaoDepositaria();
		if (this_present_nmeInstituicaoDepositaria || that_present_nmeInstituicaoDepositaria) {
			if (!(this_present_nmeInstituicaoDepositaria && that_present_nmeInstituicaoDepositaria))
				return false;
			if (!this.nmeInstituicaoDepositaria.equals(that.nmeInstituicaoDepositaria))
				return false;
		}

		return true;
	}

	@Override
	public int hashCode() {
		List<Object> list = new ArrayList<Object>();

		boolean present_nroIdCnpq = true && (isSetNroIdCnpq());
		list.add(present_nroIdCnpq);
		if (present_nroIdCnpq)
			list.add(nroIdCnpq);

		boolean present_seqProducao = true;
		list.add(present_seqProducao);
		if (present_seqProducao)
			list.add(seqProducao);

		boolean present_seqPatente = true;
		list.add(present_seqPatente);
		if (present_seqPatente)
			list.add(seqPatente);

		boolean present_codRegistro = true && (isSetCodRegistro());
		list.add(present_codRegistro);
		if (present_codRegistro)
			list.add(codRegistro);

		boolean present_tpoPatente = true && (isSetTpoPatente());
		list.add(present_tpoPatente);
		if (present_tpoPatente)
			list.add(tpoPatente);

		boolean present_titRegistro = true && (isSetTitRegistro());
		list.add(present_titRegistro);
		if (present_titRegistro)
			list.add(titRegistro);

		boolean present_dtaPedidoDeposito = true && (isSetDtaPedidoDeposito());
		list.add(present_dtaPedidoDeposito);
		if (present_dtaPedidoDeposito)
			list.add(dtaPedidoDeposito);

		boolean present_dtaConcessao = true && (isSetDtaConcessao());
		list.add(present_dtaConcessao);
		if (present_dtaConcessao)
			list.add(dtaConcessao);

		boolean present_nmeInstDepositoRegistro = true && (isSetNmeInstDepositoRegistro());
		list.add(present_nmeInstDepositoRegistro);
		if (present_nmeInstDepositoRegistro)
			list.add(nmeInstDepositoRegistro);

		boolean present_nmeInstituicaoDepositaria = true && (isSetNmeInstituicaoDepositaria());
		list.add(present_nmeInstituicaoDepositaria);
		if (present_nmeInstituicaoDepositaria)
			list.add(nmeInstituicaoDepositaria);

		return list.hashCode();
	}

	@Override
	public int compareTo(ProducaoPatente other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;

		lastComparison = Boolean.valueOf(isSetNroIdCnpq()).compareTo(other.isSetNroIdCnpq());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetNroIdCnpq()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nroIdCnpq, other.nroIdCnpq);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetSeqProducao()).compareTo(other.isSetSeqProducao());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetSeqProducao()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.seqProducao, other.seqProducao);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetSeqPatente()).compareTo(other.isSetSeqPatente());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetSeqPatente()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.seqPatente, other.seqPatente);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetCodRegistro()).compareTo(other.isSetCodRegistro());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetCodRegistro()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.codRegistro, other.codRegistro);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetTpoPatente()).compareTo(other.isSetTpoPatente());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetTpoPatente()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tpoPatente, other.tpoPatente);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetTitRegistro()).compareTo(other.isSetTitRegistro());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetTitRegistro()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.titRegistro, other.titRegistro);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetDtaPedidoDeposito()).compareTo(other.isSetDtaPedidoDeposito());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetDtaPedidoDeposito()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dtaPedidoDeposito, other.dtaPedidoDeposito);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetDtaConcessao()).compareTo(other.isSetDtaConcessao());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetDtaConcessao()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dtaConcessao, other.dtaConcessao);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetNmeInstDepositoRegistro()).compareTo(other.isSetNmeInstDepositoRegistro());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetNmeInstDepositoRegistro()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nmeInstDepositoRegistro, other.nmeInstDepositoRegistro);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetNmeInstituicaoDepositaria()).compareTo(other.isSetNmeInstituicaoDepositaria());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetNmeInstituicaoDepositaria()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nmeInstituicaoDepositaria, other.nmeInstituicaoDepositaria);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		return 0;
	}

	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
		schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
		schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder("ProducaoPatente(");
		boolean first = true;

		sb.append("nroIdCnpq:");
		if (this.nroIdCnpq == null) {
			sb.append("null");
		} else {
			sb.append(this.nroIdCnpq);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("seqProducao:");
		sb.append(this.seqProducao);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("seqPatente:");
		sb.append(this.seqPatente);
		first = false;
		if (isSetCodRegistro()) {
			if (!first)
				sb.append(", ");
			sb.append("codRegistro:");
			if (this.codRegistro == null) {
				sb.append("null");
			} else {
				sb.append(this.codRegistro);
			}
			first = false;
		}
		if (isSetTpoPatente()) {
			if (!first)
				sb.append(", ");
			sb.append("tpoPatente:");
			if (this.tpoPatente == null) {
				sb.append("null");
			} else {
				sb.append(this.tpoPatente);
			}
			first = false;
		}
		if (isSetTitRegistro()) {
			if (!first)
				sb.append(", ");
			sb.append("titRegistro:");
			if (this.titRegistro == null) {
				sb.append("null");
			} else {
				sb.append(this.titRegistro);
			}
			first = false;
		}
		if (isSetDtaPedidoDeposito()) {
			if (!first)
				sb.append(", ");
			sb.append("dtaPedidoDeposito:");
			sb.append(this.dtaPedidoDeposito);
			first = false;
		}
		if (isSetDtaConcessao()) {
			if (!first)
				sb.append(", ");
			sb.append("dtaConcessao:");
			sb.append(this.dtaConcessao);
			first = false;
		}
		if (isSetNmeInstDepositoRegistro()) {
			if (!first)
				sb.append(", ");
			sb.append("nmeInstDepositoRegistro:");
			if (this.nmeInstDepositoRegistro == null) {
				sb.append("null");
			} else {
				sb.append(this.nmeInstDepositoRegistro);
			}
			first = false;
		}
		if (isSetNmeInstituicaoDepositaria()) {
			if (!first)
				sb.append(", ");
			sb.append("nmeInstituicaoDepositaria:");
			if (this.nmeInstituicaoDepositaria == null) {
				sb.append("null");
			} else {
				sb.append(this.nmeInstituicaoDepositaria);
			}
			first = false;
		}
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
		if (!isSetNroIdCnpq()) {
			throw new org.apache.thrift.protocol.TProtocolException("Required field 'nroIdCnpq' is unset! Struct:" + toString());
		}

		if (!isSetSeqProducao()) {
			throw new org.apache.thrift.protocol.TProtocolException("Required field 'seqProducao' is unset! Struct:" + toString());
		}

		if (!isSetSeqPatente()) {
			throw new org.apache.thrift.protocol.TProtocolException("Required field 'seqPatente' is unset! Struct:" + toString());
		}

		// check for sub-struct validity
	}

	private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
		try {
			// it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
			__isset_bitfield = 0;
			read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private static class ProducaoPatenteStandardSchemeFactory implements SchemeFactory {
		public ProducaoPatenteStandardScheme getScheme() {
			return new ProducaoPatenteStandardScheme();
		}
	}

	private static class ProducaoPatenteStandardScheme extends StandardScheme<ProducaoPatente> {

		public void read(org.apache.thrift.protocol.TProtocol iprot, ProducaoPatente struct) throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (schemeField.id) {
				case 1: // NRO_ID_CNPQ
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.nroIdCnpq = iprot.readString();
						struct.setNroIdCnpqIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 2: // SEQ_PRODUCAO
					if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
						struct.seqProducao = iprot.readI64();
						struct.setSeqProducaoIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 3: // SEQ_PATENTE
					if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
						struct.seqPatente = iprot.readI64();
						struct.setSeqPatenteIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 4: // COD_REGISTRO
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.codRegistro = iprot.readString();
						struct.setCodRegistroIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 5: // TPO_PATENTE
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.tpoPatente = iprot.readString();
						struct.setTpoPatenteIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 6: // TIT_REGISTRO
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.titRegistro = iprot.readString();
						struct.setTitRegistroIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 7: // DTA_PEDIDO_DEPOSITO
					if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
						struct.dtaPedidoDeposito = iprot.readI64();
						struct.setDtaPedidoDepositoIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 8: // DTA_CONCESSAO
					if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
						struct.dtaConcessao = iprot.readI64();
						struct.setDtaConcessaoIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 9: // NME_INST_DEPOSITO_REGISTRO
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.nmeInstDepositoRegistro = iprot.readString();
						struct.setNmeInstDepositoRegistroIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 10: // NME_INSTITUICAO_DEPOSITARIA
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.nmeInstituicaoDepositaria = iprot.readString();
						struct.setNmeInstituicaoDepositariaIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				default:
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();
			struct.validate();
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot, ProducaoPatente struct) throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			if (struct.nroIdCnpq != null) {
				oprot.writeFieldBegin(NRO_ID_CNPQ_FIELD_DESC);
				oprot.writeString(struct.nroIdCnpq);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldBegin(SEQ_PRODUCAO_FIELD_DESC);
			oprot.writeI64(struct.seqProducao);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(SEQ_PATENTE_FIELD_DESC);
			oprot.writeI64(struct.seqPatente);
			oprot.writeFieldEnd();
			if (struct.codRegistro != null) {
				if (struct.isSetCodRegistro()) {
					oprot.writeFieldBegin(COD_REGISTRO_FIELD_DESC);
					oprot.writeString(struct.codRegistro);
					oprot.writeFieldEnd();
				}
			}
			if (struct.tpoPatente != null) {
				if (struct.isSetTpoPatente()) {
					oprot.writeFieldBegin(TPO_PATENTE_FIELD_DESC);
					oprot.writeString(struct.tpoPatente);
					oprot.writeFieldEnd();
				}
			}
			if (struct.titRegistro != null) {
				if (struct.isSetTitRegistro()) {
					oprot.writeFieldBegin(TIT_REGISTRO_FIELD_DESC);
					oprot.writeString(struct.titRegistro);
					oprot.writeFieldEnd();
				}
			}
			if (struct.isSetDtaPedidoDeposito()) {
				oprot.writeFieldBegin(DTA_PEDIDO_DEPOSITO_FIELD_DESC);
				oprot.writeI64(struct.dtaPedidoDeposito);
				oprot.writeFieldEnd();
			}
			if (struct.isSetDtaConcessao()) {
				oprot.writeFieldBegin(DTA_CONCESSAO_FIELD_DESC);
				oprot.writeI64(struct.dtaConcessao);
				oprot.writeFieldEnd();
			}
			if (struct.nmeInstDepositoRegistro != null) {
				if (struct.isSetNmeInstDepositoRegistro()) {
					oprot.writeFieldBegin(NME_INST_DEPOSITO_REGISTRO_FIELD_DESC);
					oprot.writeString(struct.nmeInstDepositoRegistro);
					oprot.writeFieldEnd();
				}
			}
			if (struct.nmeInstituicaoDepositaria != null) {
				if (struct.isSetNmeInstituicaoDepositaria()) {
					oprot.writeFieldBegin(NME_INSTITUICAO_DEPOSITARIA_FIELD_DESC);
					oprot.writeString(struct.nmeInstituicaoDepositaria);
					oprot.writeFieldEnd();
				}
			}
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class ProducaoPatenteTupleSchemeFactory implements SchemeFactory {
		public ProducaoPatenteTupleScheme getScheme() {
			return new ProducaoPatenteTupleScheme();
		}
	}

	private static class ProducaoPatenteTupleScheme extends TupleScheme<ProducaoPatente> {

		@Override
		public void write(org.apache.thrift.protocol.TProtocol prot, ProducaoPatente struct) throws org.apache.thrift.TException {
			TTupleProtocol oprot = (TTupleProtocol) prot;
			oprot.writeString(struct.nroIdCnpq);
			oprot.writeI64(struct.seqProducao);
			oprot.writeI64(struct.seqPatente);
			BitSet optionals = new BitSet();
			if (struct.isSetCodRegistro()) {
				optionals.set(0);
			}
			if (struct.isSetTpoPatente()) {
				optionals.set(1);
			}
			if (struct.isSetTitRegistro()) {
				optionals.set(2);
			}
			if (struct.isSetDtaPedidoDeposito()) {
				optionals.set(3);
			}
			if (struct.isSetDtaConcessao()) {
				optionals.set(4);
			}
			if (struct.isSetNmeInstDepositoRegistro()) {
				optionals.set(5);
			}
			if (struct.isSetNmeInstituicaoDepositaria()) {
				optionals.set(6);
			}
			oprot.writeBitSet(optionals, 7);
			if (struct.isSetCodRegistro()) {
				oprot.writeString(struct.codRegistro);
			}
			if (struct.isSetTpoPatente()) {
				oprot.writeString(struct.tpoPatente);
			}
			if (struct.isSetTitRegistro()) {
				oprot.writeString(struct.titRegistro);
			}
			if (struct.isSetDtaPedidoDeposito()) {
				oprot.writeI64(struct.dtaPedidoDeposito);
			}
			if (struct.isSetDtaConcessao()) {
				oprot.writeI64(struct.dtaConcessao);
			}
			if (struct.isSetNmeInstDepositoRegistro()) {
				oprot.writeString(struct.nmeInstDepositoRegistro);
			}
			if (struct.isSetNmeInstituicaoDepositaria()) {
				oprot.writeString(struct.nmeInstituicaoDepositaria);
			}
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol prot, ProducaoPatente struct) throws org.apache.thrift.TException {
			TTupleProtocol iprot = (TTupleProtocol) prot;
			struct.nroIdCnpq = iprot.readString();
			struct.setNroIdCnpqIsSet(true);
			struct.seqProducao = iprot.readI64();
			struct.setSeqProducaoIsSet(true);
			struct.seqPatente = iprot.readI64();
			struct.setSeqPatenteIsSet(true);
			BitSet incoming = iprot.readBitSet(7);
			if (incoming.get(0)) {
				struct.codRegistro = iprot.readString();
				struct.setCodRegistroIsSet(true);
			}
			if (incoming.get(1)) {
				struct.tpoPatente = iprot.readString();
				struct.setTpoPatenteIsSet(true);
			}
			if (incoming.get(2)) {
				struct.titRegistro = iprot.readString();
				struct.setTitRegistroIsSet(true);
			}
			if (incoming.get(3)) {
				struct.dtaPedidoDeposito = iprot.readI64();
				struct.setDtaPedidoDepositoIsSet(true);
			}
			if (incoming.get(4)) {
				struct.dtaConcessao = iprot.readI64();
				struct.setDtaConcessaoIsSet(true);
			}
			if (incoming.get(5)) {
				struct.nmeInstDepositoRegistro = iprot.readString();
				struct.setNmeInstDepositoRegistroIsSet(true);
			}
			if (incoming.get(6)) {
				struct.nmeInstituicaoDepositaria = iprot.readString();
				struct.setNmeInstituicaoDepositariaIsSet(true);
			}
		}
	}

}
